package fr.utbm.boids.events

import java.util.Collection
import fr.utbm.boids.agents.Boid
import fr.utbm.boids.Vector
import java.util.UUID
import fr.utbm.boids.BoidBody

event ConfigureSimulation {
	val mapSelection : int
	val boidsQuantity : int
	val boidsPopulation : int
	val boidsVision : int
	
	new(mS : int, bQ : int, bP : int, bV : int) {
		mapSelection = mS
		boidsQuantity = bQ
		boidsPopulation = bP
		boidsVision = bV
	}
}

event MapParameters {
	val mapWidth : int
	val mapHeight : int
	
	new(width : int, height : int) {
		mapWidth = width
		mapHeight = height
	}
}

event GenerateMap

/* event pour prévenir l'environnement que le Boids est lancé
 */
event IsStarted {
	var type : String
	
	new (typeEntity : String){
		this.type = typeEntity
	}
}

event MakeTheFiestaBegin

event DemandeDeplacement {

	var otherBoids : Collection<BoidBody>

	new (pos : Vector, otherBoids : Collection<BoidBody>) {
		this.otherBoids = otherBoids
	}

	new (x : int, y : int, otherBoids : Collection<BoidBody>) {
		this.otherBoids = otherBoids
	}
}

event ResultatDeplacement {
	var position : Vector

	new (pos : Vector) {
		this.position = pos
	}

	/*new (x : int, y : int) {
		this.position.setXY(x, y)
	}*/
}

event ValidationDeplacement{
	var position : Vector
	
	new (pos : Vector){
		this.position = pos
	}
}

event StartingSimulation {
	val nombreDePopulations : int
	val nombreDeBoidsParPopulation : int
	val visionBoids : int
	val freqRafraichissement : int

	new(nombreDePopulations : int, nombreDeBoidsParPopulation : int, visionBoids : int, freqRafraichissement : int) {
		this.nombreDePopulations = nombreDePopulations
		this.nombreDeBoidsParPopulation = nombreDeBoidsParPopulation
		this.visionBoids = visionBoids
		this.freqRafraichissement = freqRafraichissement
	}
}

event StartPosition

event EndSimulation

/* Events of the GUI only */

event BtnLaunch

event BtnShutdown

event ListVar {
	val list : Collection<UUID>
	
	new(list: Collection<UUID>) {
		this.list = list
	}	
}

// event AllBoidsCreated

event BoidsPositions {
	val grid : Object[]
	
	new(grid: Object[]) {
		this.grid = grid
	}
}

event NeedDataBoids

event SendDataBoids {
	var lesBoids : Collection<Boid>
	
	new(boids : Collection<Boid>){
		this.lesBoids = boids
	}
}

event BoidsToDisplay {
	var boids : Collection<Boid>
	
	new(BoidsToDisplay : Collection<Boid>){
		this.boids = BoidsToDisplay
	}
}


event InitBoidBody{
	var body : BoidBody
	
	new (body : BoidBody){
		this.body = body
	}
}

event BoidBodyInitialized