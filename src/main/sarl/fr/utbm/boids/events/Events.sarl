package fr.utbm.boids.events

import java.util.Collection
import fr.utbm.boids.agents.Boid
import fr.utbm.boids.Vector
import java.util.UUID
import fr.utbm.boids.BoidBody
import java.util.Map
import fr.utbm.boids.environment.Obstacle
import java.util.List
import java.util.ArrayList

event ConfigureSimulation {
	val mapSelection : int
	val boidsQuantity : int
	val boidsPopulation : int
	val boidsVision : int
	
	new(mS : int, bQ : int, bP : int, bV : int) {
		mapSelection = mS
		boidsQuantity = bQ
		boidsPopulation = bP
		boidsVision = bV
	}
}

/*event MapParameters {
	var mapWidth : int
	var mapHeight : int

	new(width : int, height : int) {
		this.mapWidth = width
		this.mapHeight = height
	}
}*/

event MapParameters {
	var mapWidth : int
	var mapHeight : int
	var obstacles : List<Obstacle>
	
	new(width : int, height : int, obstacles : List<Obstacle>) {
		this.mapWidth = width
		this.mapHeight = height
		this.obstacles = obstacles
	}
}

event GenerateMap

/* event pour prévenir l'environnement que le Boids est lancé
 */
event IsStarted {
	var type : String
	
	new (typeEntity : String){
		this.type = typeEntity
	}
}

event MakeTheFiestaBegin

event DemandeDeplacement {

	/*var otherBoids : Collection<BoidBody>*/
	var otherBoids : Map<UUID, BoidBody>

	/*new (pos : Vector, otherBoids : Collection<BoidBody>) {
		this.otherBoids = otherBoids
	}

	new (x : int, y : int, otherBoids : Collection<BoidBody>) {
		this.otherBoids = otherBoids
	}*/
	
	//provisoire
	new() {
	}

	new (otherBoids : Map<UUID, BoidBody>) {
		this.otherBoids = otherBoids
	}
}

event ResultatDeplacement {
	var position : Vector

	new (pos : Vector) {
		this.position = pos
	}

	/*new (x : int, y : int) {
		this.position.setXY(x, y)
	}*/
}

event ValidationDeplacement{
	var position : Vector
	
	new (pos : Vector){
		this.position = pos
	}
}

event StartingSimulation {
	val nombreDePopulations : int
	val nombreDeBoidsParPopulation : int
	val visionBoids : int
	val freqRafraichissement : int

	new(nombreDePopulations : int, nombreDeBoidsParPopulation : int, visionBoids : int, freqRafraichissement : int) {
		this.nombreDePopulations = nombreDePopulations
		this.nombreDeBoidsParPopulation = nombreDeBoidsParPopulation
		this.visionBoids = visionBoids
		this.freqRafraichissement = freqRafraichissement
	}
}

/*event StartPosition {
	var hauteur : int 
	var largeur : int 
	
	new (h : int, l : int ){
		this.hauteur = h
		this.largeur = l
	}
 * }
 */
 
event StartPosition {
	var hauteur : int
	var largeur : int
	var obstacles : List<Obstacle>

	new (h : int, l : int, obstacles : List<Obstacle>) {
		this.hauteur = h
		this.largeur = l
		this.obstacles = obstacles
	}
}

/* Events of the GUI only */

event BtnLaunch

event BtnShutdown

event ListVar {
	val list : Collection<UUID>
	
	new(list: Collection<UUID>) {
		this.list = list
	}	
}

// event AllBoidsCreated

event BoidsPositions {
	val grid : Object[]
	
	new(grid: Object[]) {
		this.grid = grid
	}
}

event NeedDataBoids

event SendDataBoids {
	var lesBoids : Collection<Boid>
	
	new(boids : Collection<Boid>){
		this.lesBoids = boids
	}
}

event BoidsToDisplay {
	var boids : Map<UUID,BoidBody>
	
	new(BoidsToDisplay : Map<UUID, BoidBody>) {
		this.boids = BoidsToDisplay
	}
}


event InitBoidBody{
	var body : BoidBody
	
	new (body : BoidBody){
		this.body = body
	}
}

event BoidBodyInitialized