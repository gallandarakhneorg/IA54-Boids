package fr.utbm.boids.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.InnerContextAccess
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.boids.events.IsStarted
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.EndSimulation
import java.util.Collection
import fr.utbm.boids.events.StartingSimulation
import java.util.ArrayList
import java.util.TreeSet
import java.util.UUID
import fr.utbm.boids.Vector
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.events.MapParameters
import fr.utbm.boids.events.ListVar
import fr.utbm.boids.events.BoidsPositions
import fr.utbm.boids.events.NeedDataBoids
import fr.utbm.boids.events.SendDataBoids
import io.sarl.util.Scopes
import fr.utbm.boids.events.BoidsToDisplay
import fr.utbm.boids.events.ValidationDeplacement
import java.util.Map
import java.util.HashMap

/** 
 * @author Zilliqman
 * 
 */
 
 /*
  * Il va falloir avoir des tableaux d'obstacles et de boids
  * 
  * Peut-être vaut-il mieux faire 2 tableaux (1 pour les obstacles et 1 pour les boids)
  */
 
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, InnerContextAccess
	
	var boidsList : Collection<Boid>	//liste complète des boids
	var nombreDePopulations : int
	var nombreDeBoidsParPopulation : int
	var visionBoids : int  
	var distanceBoids : int
	//var boidsGrid : Collection<Boid>	//liste des boids ayant mis leurs coordonnées à jour à l'étape i
	var boidsGrid : Map<Vector, UUID>
	var superBoids : boolean
	//var boids : Object[]
	var grid : Object[]
	var boidsUpdated : int
	var verrou : boolean
	var largeur : int
	var hauteur : int
	


	on Initialize {
		loggingName = "Environment"
		info("The Environment is started.")
		emit(new IsStarted("Environment", null))
		verrou = false
		//emit(new IsStarted())
		//emit(new ListVar(boidsList))
	}
	
	on MapParameters {
		this.largeur = occurrence.mapWidth
		this.hauteur = occurrence.mapHeight
	}
	
	on IsStarted {
		if(occurrence.type == "Boid"){
			boidsList.add(occurrence.me)
		}
	}
	
	on StartingSimulation {
		info("HO")
		this.nombreDeBoidsParPopulation = occurrence.nombreDeBoidsParPopulation
		this.nombreDePopulations = occurrence.nombreDePopulations
		this.visionBoids = occurrence.visionBoids

		//this.boidsGrid = new ArrayList<Boid>()
		this.boidsGrid = new HashMap<Vector, UUID>
		boidsList = new ArrayList()
		
		info ("ready to start ")
		
		for (var i = 0; i< this.nombreDePopulations; i++ ){
			for (var j = 0 ; j < this.nombreDeBoidsParPopulation; j++){
				//TODO à voir comment gérer une liste de boids
				
				spawnInContext(Boid, innerContext, i, visionBoids, distanceBoids)
				//boidsList.add(newBoid)
			}
		}

		boidsUpdated = 0
		// hauteur = 50
		// largeur = 50

		innerContext.defaultSpace.emit(ID, new StartPosition())
	}

	on ResultatDeplacement {
		info("l'env recoit les coordonnées")
		boidsUpdated += 1
		//var accept = true
		var accept = false
		
		occurrence.position = estDansLaCarte(occurrence.position)
		
		while (verrou){
			Thread.sleep(100)
		}
		
		verrou = true
		
		// remplace le commentaire ci-dessous, fait la même chose plus simplement, par contre Boid remplacer par UUID même si on en fait rien pour l'instant
		if (!this.boidsGrid.containsKey(occurrence.position)) {
			this.boidsGrid.put(occurrence.position, occurrence.boid.ID)
			accept = true
		}
		
		
		/* 
		//TODO RESOUDRE BUG
		//tests
		var test : Boid
		//info(occurrence.boid)
		test = occurrence.boid
		info ("position : "  + test.position.x)
		/* var doesItWork =

		this.boidsGrid.add(test)	//BUG ICI : add
		//info(doesItWork) 							//Uncaught exception: null
		
		// vérifier sortie de map
		info(boidsGrid)
		
		for (boid : boidsGrid){
			info("premier tour")
			//on vérifie si le boid ne veut pas aller à un endroit ou il y a déjà un boid
			info (boid)
			if (boid.position.x == occurrence.position.x && boid.position.y == occurrence.position.y) { // vérifier collision obstacles
				accept = false
				boidsGrid.remove(occurrence.boid)
		
		}
		*/
		//fin tests
		
		
		
		if (accept) {
			// emit(new ResultatDeplacement(occurrence.position, occurrence.boid), Scopes.addresses(occurrence.source)
			emit(new ValidationDeplacement(occurrence.position),Scopes.addresses(occurrence.source))
		} else {
			//TODO resolution des problèmes de collision interBoids
			
			//TODO supprimer acceptation collisions
			emit(new ResultatDeplacement(occurrence.position, occurrence.boid), Scopes.addresses(occurrence.source))
		}
		//info(boidsUpdated)
		info (boidsGrid)
		
		verrou = false
		
	}
	
	
	//TODO reprendre l'envoi des boids avec la MAP
	on NeedDataBoids{
		if(this.boidsUpdated == boidsList.length){	//si le nombre de boids ayant update leur coordonnées est égal au nombre de boids vivants, on peut envoyer au Scheduler
			info("J'apprends que le Scheduler veut de nouvelles coordonnées")
			//emit(new SendDataBoids(this.boidsGrid))	//de quoi afficher les boids
			info(boidsGrid)
			//emit(new BoidsToDisplay(boidsGrid))
			this.boidsGrid = new HashMap<Vector,UUID>
		}
	}

	def estDansLaCarte(v : Vector) : Vector {	//TODO rajouter tests murs ICI
		var positionX = v.getX()
		var positionY = v.getY()
		
		if (positionX > largeur) {
			positionX -= 2 * largeur
		}
		if (positionX < -largeur) {
			positionX += 2 * largeur
		}
		if (positionY > hauteur) {
			positionY -= 2 * hauteur
		}
		if (positionY < -hauteur) {
			positionY += 2 * hauteur
		}
		
		var newPosition = new Vector(positionX, positionY)
		return newPosition
	}

	on EndSimulation {
		killMe
	}

	on Destroy {
		
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
		/*if(occurrence.agentType == 'Boid') {
			this.boidsGrid.add(occurrence.)
		}*/
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	/*on AllBoidsCreated {
		boids = getDefaultContext().defaultSpace.participants.toArray;
		info(boids)
		boids.get(2).
	}*/
	
	on BoidsPositions {
		this.grid = occurrence.grid
	}
}