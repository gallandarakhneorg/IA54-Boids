package fr.utbm.boids.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.InnerContextAccess
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.boids.events.IsStarted
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.EndSimulation
import java.util.Collection
import fr.utbm.boids.events.StartingSimulation
import java.util.ArrayList
import java.util.TreeSet
import java.util.UUID
import fr.utbm.boids.Vector
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.events.MapParameters
import fr.utbm.boids.events.ListVar
import fr.utbm.boids.events.BoidsPositions
import fr.utbm.boids.events.NeedDataBoids
import fr.utbm.boids.events.SendDataBoids
import io.sarl.util.Scopes
import fr.utbm.boids.events.BoidsToDisplay
import fr.utbm.boids.events.ValidationDeplacement
import java.util.Map
import java.util.HashMap
import fr.utbm.boids.BoidBody
import fr.utbm.boids.events.InitBoidBody
import fr.utbm.boids.events.BoidBodyInitialized

 
 /*
  * Il va falloir avoir des tableaux d'obstacles et de boids
  * 
  * Peut-être vaut-il mieux faire 2 tableaux (1 pour les obstacles et 1 pour les boids)
  */
 
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, InnerContextAccess
	
	var boidsList : Map<UUID,BoidBody>	//liste complète des corps de boids
	var boidsGrid : Map<Vector, UUID>
	var superBoids : boolean
	var grid : Object[]
	var boidsUpdated : int
	var largeur : int
	var hauteur : int
	


	on Initialize {
		loggingName = "Environment"
		info("The Environment is started.")
		emit(new IsStarted("Environment"))
		//emit(new IsStarted())
		//emit(new ListVar(boidsList))
	}
	
	on MapParameters {
		this.largeur = occurrence.mapWidth
		this.hauteur = occurrence.mapHeight
	}
	
	on StartingSimulation {
		info("HO")

		this.boidsGrid = new HashMap<Vector, UUID>
		this.boidsList = new HashMap<UUID, BoidBody>
		
		info ("ready to start ")
		
		for (var i = 0; i< occurrence.nombreDePopulations; i++){
			for (var j = 0 ; j < occurrence.nombreDeBoidsParPopulation; j++){
				
				var tempBody = new BoidBody (i,10,2,occurrence.visionBoids, 50)		//TODO récupérer masse, vmax et distance de vision depuis l'interface utilisateur (param 2 et 3 et 5)
				var id = spawnInContext(Boid, innerContext)
				this.boidsList.put(id, tempBody)
			}
		}

		boidsUpdated = 0
		// hauteur = 50
		// largeur = 50

	}

	on IsStarted {
		if (occurrence.type == "Boid") {
			// Quand le Boid est démarré, on lui donne son body
			innerContext.defaultSpace.emit(ID,new InitBoidBody(this.boidsList.get(occurrence.source.UUID)), Scopes.addresses(occurrence.source))
		}
	}
	
	on BoidBodyInitialized {
		// Quand le Boid a initialisé son body, on le start
		innerContext.defaultSpace.emit(ID,new StartPosition(), Scopes.addresses(occurrence.source))
	}


	//TODO Si à l'initialisation deux boids spawn au même endroit, il faut relancer un spawn
	on ResultatDeplacement {
		info("l'env recoit les coordonnées")
		boidsUpdated += 1
		var accept = false
		
		occurrence.position = estDansLaCarte(occurrence.position)
		
		synchronized (boidsGrid){
		
			// on regarde si la position est libre 
			if (!this.boidsGrid.containsKey(occurrence.position)) {
				this.boidsGrid.put(occurrence.position, occurrence.source.UUID)
				accept = true
			}
			
			if (accept) {
				emit(new ValidationDeplacement(occurrence.position),Scopes.addresses(occurrence.source))
			} else {
				//TODO resolution des problèmes de collision interBoids
				
				//TODO supprimer acceptation collisions
				emit(new ResultatDeplacement(occurrence.position), Scopes.addresses(occurrence.source))
			}
			//info(boidsUpdated)
			//info (boidsGrid)
		}

		
	}
	
	
	//TODO reprendre l'envoi des boids avec la MAP
	on NeedDataBoids{
		info ("demande de rafraichissement : " + this.boidsUpdated)
		if(this.boidsUpdated == boidsList.size){	//si le nombre de boids ayant update leur coordonnées est égal au nombre de boids vivants, on peut envoyer au Scheduler
			info("J'apprends que le Scheduler veut de nouvelles coordonnées")
			
			//emit(new SendDataBoids(this.boidsGrid))	//de quoi afficher les boids
			
			// on met à jour les positions des boids dans leurs corps (elem.key => Vector, elem.value => UUID
			synchronized (boidsGrid){
				for (elem : this.boidsGrid.entrySet){
					var modifBody = this.boidsList.get(elem.value)
					modifBody.position = elem.key 
					this.boidsList.put(elem.value, modifBody)
				}
	
				// remise à zéro de la liste des changements
				this.boidsGrid = new HashMap<Vector, UUID>
			}
			
			// envoi des nouveaux corps des boids
			emit(new BoidsToDisplay(boidsList))
			
			/*info ("j'affiche les nouveaux corps")
			info (boidsList)*/
			
		}
	}

	def estDansLaCarte(v : Vector) : Vector {	//TODO rajouter tests murs ICI
		var positionX = v.getX()
		var positionY = v.getY()
		
		if (positionX > largeur) {
			positionX -= 2 * largeur
		}
		if (positionX < -largeur) {
			positionX += 2 * largeur
		}
		if (positionY > hauteur) {
			positionY -= 2 * hauteur
		}
		if (positionY < -hauteur) {
			positionY += 2 * hauteur
		}
		
		var newPosition = new Vector(positionX, positionY)
		return newPosition
	}

	on EndSimulation {
		killMe
	}

	on Destroy {
		
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
		/*if(occurrence.agentType == 'Boid') {
			this.boidsGrid.add(occurrence.)
		}*/
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	/*on AllBoidsCreated {
		boids = getDefaultContext().defaultSpace.participants.toArray;
		info(boids)
		boids.get(2).
	}*/
	
	on BoidsPositions {
		this.grid = occurrence.grid
	}
}