package fr.utbm.boids.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.InnerContextAccess
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.boids.events.IsStarted
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.EndSimulation
import java.util.Collection
import fr.utbm.boids.events.StartingSimulation
import java.util.ArrayList
import java.util.TreeSet
import java.util.UUID
import fr.utbm.boids.Vector
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.events.MapParameters
import fr.utbm.boids.events.ListVar

/** 
 * @author Zilliqman
 * 
 */
 
 /*
  * Il va falloir avoir des tableaux d'obstacles et de boids
  * 
  * Peut-être vaut-il mieux faire 2 tableaux (1 pour les obstacles et 1 pour les boids)
  */
 
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, InnerContextAccess
	
	var boidsList : Collection<UUID>
	var nombreDePopulations : int
	var nombreDeBoidsParPopulation : int
	var visionBoids : int  
	var distanceBoids : int
	var boidsGrid : Collection<Boid>
	var superBoids : boolean
	
	
	var largeur : int
	var hauteur : int
	


	on Initialize {
		loggingName = "Environment"
		info("The Environment is started.")
		emit(new IsStarted())
		//emit(new ListVar(boidsList))
	}
	
	on MapParameters {
		this.largeur = occurrence.mapWidth
		this.hauteur = occurrence.mapHeight
	}
	
	on StartingSimulation {
		this.nombreDeBoidsParPopulation = occurrence.nombreDeBoidsParPopulation
		this.nombreDePopulations = occurrence.nombreDePopulations
		this.visionBoids = occurrence.visionBoids
		
		boidsList = new ArrayList()
		
		info ("ready to start ")
		
		for (var i = 0; i< this.nombreDePopulations; i++ ){
			for (var j = 0 ; j < this.nombreDeBoidsParPopulation; j++){
				//TODO à voir comment gérer une liste de boids
				
				//spawn (Boid, i, visionBoids, distanceBoids)
				val newBoid = spawnInContext(Boid, innerContext, i, visionBoids, distanceBoids)
				boidsList.add(newBoid)
			}
		}

		// hauteur = 50
		// largeur = 50

		innerContext.defaultSpace.emit(ID, new StartPosition())
	}

	on ResultatDeplacement {
		var accept = true
		
		occurrence.position = estDansLaCarte(occurrence.position)
		
		/*
		//TODO RESOUDRE BUG
		//tests
		var test : Boid
		info(occurrence.boid)
		test = occurrence.boid
		var doesItWork = this.boidsGrid.add(test)	//BUG ICI : add
		info(doesItWork) 							//Uncaught exception: null
		
		// vérifier sortie de map
		info(boidsGrid)
		
		for (boid : boidsGrid){
			info("premier tour")
			//on vérifie si le boid ne veut pas aller à un endroit ou il y a déjà un boid
			if (boid.position.x == occurrence.position.x && boid.position.y == occurrence.position.y) { // vérifier collision obstacles
				accept = false
				boidsGrid.remove(occurrence.boid)
			}
		}
		//fin tests
		*/
		
		
		if(accept){
			emit(new ResultatDeplacement(occurrence.position, occurrence.boid))
		} else {
			//TODO resolution des problèmes de collision interBoids
			
			//TODO supprimer acceptation collisions
			emit(new ResultatDeplacement(occurrence.position, occurrence.boid))
		}
	}

	def estDansLaCarte(v : Vector) : Vector {	//TODO rajouter tests murs ICI
		var positionX = v.getX()
		var positionY = v.getY()
		
		if (positionX > largeur) {
			positionX -= 2 * largeur
		}
		if (positionX < -largeur) {
			positionX += 2 * largeur
		}
		if (positionY > hauteur) {
			positionY -= 2 * hauteur
		}
		if (positionY < -hauteur) {
			positionY += 2 * hauteur
		}
		
		var newPosition = new Vector(positionX, positionY)
		return newPosition
	}

	on EndSimulation {
		killMe
	}

	on Destroy {
		
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}