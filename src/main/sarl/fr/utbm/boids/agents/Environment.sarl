package fr.utbm.boids.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.boids.events.IsStarted
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.EndSimulation
import java.util.Collection
import fr.utbm.boids.events.StartingSimulation
import java.util.ArrayList

/** 
 * @author Zilliqman
 * 
 */
 
 /*
  * Il va falloir avoir des tableaux d'obstacles et de boids
  * 
  * Peut-être vaut-il mieux faire 2 tableaux (1 pour les obstacles et 1 pour les boids)
  */
 
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var boidsList : Collection<Boid>
	var nombreDePopulations : int
	var nombreDeBoidsParPopulation : int
	var visionBoids : int  
	var distanceBoids : int 

	on Initialize {
		loggingName = "Environment"
		info("The Environment is started.")
		emit(new IsStarted())
	}
	
	on StartingSimulation {
		this.nombreDeBoidsParPopulation = occurrence.nombreDeBoidsParPopulation
		this.nombreDePopulations = occurrence.nombreDePopulations
		this.visionBoids = occurrence.visionBoids
		
		boidsList = new ArrayList()
		
		info ("ready to start ")
		
		for (var i = 0; i< this.nombreDePopulations; i++ ){
			for (var j = 0 ; j < this.nombreDeBoidsParPopulation; j++){
				//TODO à voir comment gérer une liste de boids
				spawn (Boid, i, visionBoids, distanceBoids)
			}
		}
		
	}

	on EndSimulation {
		killMe
	}

	on Destroy {
		
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}