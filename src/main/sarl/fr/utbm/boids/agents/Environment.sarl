package fr.utbm.boids.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.InnerContextAccess
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import fr.utbm.boids.events.IsStarted
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import java.util.Collection
import fr.utbm.boids.events.StartingSimulation
import java.util.ArrayList
import java.util.TreeSet
import java.util.UUID
import fr.utbm.boids.Vector
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.events.MapParameters
import fr.utbm.boids.events.ListVar
import fr.utbm.boids.events.BoidsPositions
import fr.utbm.boids.events.NeedDataBoids
import fr.utbm.boids.events.SendDataBoids
import io.sarl.util.Scopes
import fr.utbm.boids.events.BoidsToDisplay
import fr.utbm.boids.events.ValidationDeplacement
import java.util.Map
import java.util.HashMap
import fr.utbm.boids.BoidBody
import fr.utbm.boids.events.InitBoidBody
import fr.utbm.boids.events.BoidBodyInitialized
import io.sarl.lang.core.Address
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.environment.Obstacle
import java.util.List
import javafx.geometry.Point2D
import fr.utbm.boids.gui.fx.EndSimulation
import fr.utbm.boids.events.BoidsReady
import fr.utbm.boids.events.BoidsSideReady
import io.sarl.core.Schedules
import io.sarl.core.Behaviors
import java.util.concurrent.atomic.AtomicInteger

/*
  * Il va falloir avoir des tableaux d'obstacles et de boids
  * 
  * Peut-être vaut-il mieux faire 2 tableaux (1 pour les obstacles et 1 pour les boids)
  */
 
agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle, InnerContextAccess, Behaviors, Schedules
	
	var boidsList : Map<UUID,BoidBody>	//liste complète des corps de boids
	var boidsGrid : Map<Vector, UUID>
	var boidsAddresses : Map<UUID, Address>
	var superBoids : boolean
	var grid : Object[]
	var boidsUpdated : int
	var largeur : int
	var hauteur : int
	var obstacles : List<Obstacle>
	var boidsQuantity : int
	var populationSize : int
	var firstTime : boolean


	on Initialize {
		loggingName = "Environment-" + this.ID
		info("The Environment is started.")
		boidsUpdated = 0
		emit(new IsStarted("Environment"))
		//emit(new IsStarted())
		// emit(new ListVar(boidsList))
		this.boidsList = new HashMap<UUID, BoidBody>
		firstTime = true
	}
	
	on MapParameters {
		this.largeur = occurrence.mapWidth
		this.hauteur = occurrence.mapHeight
		this.obstacles = occurrence.obstacles
	}
	
	on StartingSimulation {
		info("HO")
		
		this.boidsQuantity = occurrence.nombreDeBoidsParPopulation
		this.populationSize = occurrence.nombreDePopulations
		
		this.boidsGrid = new HashMap<Vector, UUID>
		this.boidsList = new HashMap<UUID, BoidBody>
		this.boidsAddresses = new HashMap<UUID, Address>
		
		info ("ready to start ")
		info('Boids quantity: ' + this.boidsQuantity)
		info('Population size: ' + this.populationSize)
		for (var i = 0; i < occurrence.nombreDePopulations; i++) {
			for (var j = 0 ; j < occurrence.nombreDeBoidsParPopulation; j++){
				var tempBody = new BoidBody (i, 10, 2, occurrence.visionBoids, 50)		//TODO récupérer masse, vmax et distance de vision depuis l'interface utilisateur (param 2 et 3 et 5)
				var id = spawnInContext(typeof(Boid), innerContext)
				this.boidsList.put(id, tempBody)
			}
		} 
	}

	on IsStarted [this.boidsList.containsKey(occurrence.source.UUID) == true] {
		if (occurrence.type == "Boid") {
			// Quand le Boid est démarré, on lui donne son body
			
			//info('Recherche de ' + occurrence.source.UUID + ' dans: ' + this.boidsList)
			//info(this.boidsList.get(occurrence.source.UUID).groupe)
			//info(this.boidsList.get(occurrence.source.UUID).groupeVitesseMax)
			//info(this.boidsList.get(occurrence.source.UUID).masse)
			//info(this.boidsList.get(occurrence.source.UUID).angleVisibilite)
			//info(this.boidsList.get(occurrence.source.UUID).distanceVisibilite)
			innerContext.defaultSpace.emit(ID, new InitBoidBody(this.boidsList.get(occurrence.source.UUID)), Scopes.addresses(occurrence.source))
			boidsAddresses.put(occurrence.source.UUID, occurrence.source)
		}
	}
	
	on BoidBodyInitialized {
		// Quand le Boid a initialisé son body, on le start
		// innerContext.defaultSpace.emit(ID,new StartPosition(this.hauteur, this.largeur), Scopes.addresses(occurrence.source))
		innerContext.defaultSpace.emit(ID, new StartPosition(this.hauteur, this.largeur, this.obstacles), Scopes.addresses(occurrence.source))
	}


	//TODO Si à l'initialisation deux boids spawn au même endroit, il faut relancer un spawn
	on ResultatDeplacement {
		info("l'env recoit les coordonnées")
		boidsUpdated += 1
		
		info ("maintenant updated = " + boidsUpdated)
		
		var accept = false
		
		occurrence.position = estDansLaCarte(occurrence.position)
		
		synchronized (boidsGrid){
		
			// on regarde si la position est libre 
			if (!this.boidsGrid.containsKey(occurrence.position)) {
				this.boidsGrid.put(occurrence.position, occurrence.source.UUID)
				accept = true
			}
		
		}
		
		// pour interdire à un boids d'aller dans un obstacle
		/*this.obstacles.forEach[o : Obstacle, index : int |
			if(o.polygon.contains(new Point2D(occurrence.position.x, occurrence.position.y))) {
				// setter accept à false. Au début on le mettrait à true et on le passerait à false seulement si quelque chose empêche le déplacement
			}
		]*/
			
		if (accept) {
			info('DEPLACEMENT ACCEPTE')
			//emit(new ValidationDeplacement(occurrence.position),Scopes.addresses(occurrence.source))
			innerContext.defaultSpace.emit(ID, new ValidationDeplacement(occurrence.position), Scopes.addresses(occurrence.source))
		} else {
			//TODO resolution des problèmes de collision interBoids
			
			//TODO supprimer acceptation collisions
			//emit(new ResultatDeplacement(occurrence.position), Scopes.addresses(occurrence.source))
			innerContext.defaultSpace.emit(ID, new ValidationDeplacement(occurrence.position), Scopes.addresses(occurrence.source))
		}
		//info(boidsUpdated)
		//info (boidsGrid)

		if(boidsUpdated == boidsQuantity * populationSize && firstTime == true) {
			info('boidsUpdated: ' + boidsUpdated + ', boidsTotal: ' + boidsQuantity * populationSize)
			wake(new BoidsSideReady)
			firstTime = false
		}
	}
	
	
	on NeedDataBoids{
		info ("demande de rafraichissement : " + this.boidsUpdated)
		if(this.boidsUpdated == boidsList.size){	//si le nombre de boids ayant update leur coordonnées est égal au nombre de boids vivants, on peut envoyer au Scheduler
			info("J'apprends que le Scheduler veut de nouvelles coordonnées")
			
			//emit(new SendDataBoids(this.boidsGrid))	//de quoi afficher les boids
			
			// on met à jour les positions des boids dans leurs corps (elem.key => Vector, elem.value => UUID
			synchronized (boidsGrid){
				for (elem : this.boidsGrid.entrySet){
					var modifBody = this.boidsList.get(elem.value)
					modifBody.position = elem.key 
					this.boidsList.put(elem.value, modifBody)
				}
	
				// remise à zéro de la liste des changements
				this.boidsGrid = new HashMap<Vector, UUID>
				this.boidsUpdated = 0 
			}
			
			// envoi des nouveaux corps des boids
			emit(new BoidsToDisplay(this.boidsList))
			
			/*info ("j'affiche les nouveaux corps")
			info (boidsList)*/
			
			//On se prépare pour la prochaine itération
			this.boidsUpdated = 0
			boidsAddresses.forEach[id, address|
				info("REGARDER ICI IIIIIIIIIIIIIIIIIIIIIIIII")
				info(id + " " + address)
				innerContext.defaultSpace.emit(id, new DemandeDeplacement(this.boidsList), Scopes.addresses(address))
			]
			
		}
	}

	def estDansLaCarte(v : Vector) : Vector {	//TODO rajouter tests murs ICI / Rename ?
		var positionX = v.getX()
		var positionY = v.getY()
		
		/*if (positionX > largeur) {
			positionX -= 2 * largeur
		}
		if (positionX < -largeur) {
			positionX += 2 * largeur
		}
		if (positionY > hauteur) {
			positionY -= 2 * hauteur
		}
		if (positionY < -hauteur) {
			positionY += 2 * hauteur
		}*/
		
		if(positionX > largeur)
			positionX = 1 // peut-être que 0 marche aussi
		if(positionX < 0)
			positionX = largeur - 1 // peut-être que largeur marche aussi
		if(positionY > hauteur)
			positionY = 1 // peut-être que 0 marche aussi
		if(positionY < 0)
			positionY = hauteur - 1 // peut-être que hauteur marche aussi
		
		var newPosition = new Vector(positionX, positionY)
		return newPosition
	}

	on EndSimulation [!hasMemberAgent] {
		info('Environment kill')
		emit(new EndSimulation)
		killMe
	}
	
	on EndSimulation [hasMemberAgent] {
		info('JE DOIS TOUS LES TUER')
		innerContext.defaultSpace.emit(ID, new EndSimulation)
	}

	on Destroy {
		
	}

	/*on MemberJoined [occurrence.inInnerDefaultSpace && memberAgentCount == boidsQuantity * populationSize] {
		info("All boids have been created: " + memberAgentCount)
		emit(new BoidsReady)
	}*/
	
	on BoidsSideReady {
		info("All boids have been created: " + boidsUpdated)
		emit(new BoidsReady)
	}

	/*on AllBoidsCreated {
		boids = getDefaultContext().defaultSpace.participants.toArray;
		info(boids)
		boids.get(2).
	}*/
	
	on BoidsPositions {
		this.grid = occurrence.grid
	}
}