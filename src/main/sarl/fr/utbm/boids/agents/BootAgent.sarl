package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import fr.utbm.boids.gui.fx.EndSimulation
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.ConfigureSimulation
import fr.utbm.boids.gui.BoidsFxViewerController
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.StartingSimulation
import fr.utbm.boids.events.GenerateMap
import fr.utbm.boids.events.MapParameters
import java.util.UUID
import java.util.Collection
import fr.utbm.boids.events.ListVar
import io.sarl.core.MemberJoined
import fr.utbm.boids.events.BoidsPositions

agent BootAgent {
	uses Logging, Behaviors, InnerContextAccess, Lifecycle, DefaultContextInteractions
	
	var map : int
	var boidsQuantity : int
	var boidsPopulation : int
	var boidsVision : int
	var exited : boolean = false
	var ctrl : BoidsFxViewerController = null;
	var boidsList: Collection<UUID>
	var grid : Object[]

	on Initialize {
		loggingName = "BootAgent-" + this.ID
		ctrl = occurrence.parameters.get(0) as BoidsFxViewerController
		ctrl.UISpace.register(asEventListener)
		spawn(Environment, boidsQuantity) 
		info("Starting simulation")
		spawn(Scheduler)
	}
	
	on ConfigureSimulation {
		info("Configuration of the environment...") 
		this.boidsQuantity = occurrence.boidsQuantity
		this.map = occurrence.mapSelection
		this.boidsPopulation = occurrence.boidsPopulation
		this.boidsVision = occurrence.boidsVision;
		info('Map: ' + this.map)
		info('Boids quantity: ' + this.boidsQuantity)
		info('Boids population: ' + this.boidsPopulation)
		info('Boids vision: ' + this.boidsVision)
		emit (new MapParameters(ctrl.mapWidth, ctrl.mapHeight))
		emit (new BoidsPositions(grid))
		emit (new StartingSimulation(boidsPopulation, boidsQuantity, boidsVision, 50))
		wake(new GenerateMap())
	}
	
	on GenerateMap {
		info('Generating map...');
		ctrl.buildMap(this.map)
	}
	
	/*on ListVar {
		this.boidsList = occurrence.list
		ctrl.updateGraphics(boidsList);
	}*/

	on EndSimulation [!hasMemberAgent] {
		info("The simulation has ended.")
		killMe
	}
	
	on EndSimulation [hasMemberAgent && !exited] {
		exited = true
		innerContext.defaultSpace.emit(ID, new EndSimulation)
	}

	/*on MemberJoined [memberAgentCount >= boidsQuantity * boidsPopulation] { // Distinction avec les obstacles qui peut poser probl√®me
		info("All boids have been created")
		emit(new AllBoidsCreated)
	}*/
}
