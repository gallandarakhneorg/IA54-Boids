package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import fr.utbm.boids.gui.fx.EndSimulation
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.ConfigureSimulation
import fr.utbm.boids.gui.BoidsFxViewerController
import io.sarl.core.Behaviors
import fr.utbm.boids.events.StartingSimulation
import java.util.List
import fr.utbm.boids.environment.Obstacle
import java.util.ArrayList
import fr.utbm.boids.events.BoidsReady
import io.sarl.lang.core.Address
import fr.utbm.boids.events.TimeManagingStart
import fr.utbm.boids.Configuration

agent BootAgent {
	uses Logging, Behaviors, InnerContextAccess, Lifecycle
	
	var map : int
	var boidsQuantity : int
	var boidsPopulation : int
	var boidsVision : int
	var exited : boolean = false
	var ctrl : BoidsFxViewerController = null

	on Initialize {
		loggingName = "BootAgent-" + this.ID
		ctrl = occurrence.parameters.get(0) as BoidsFxViewerController
		ctrl.UISpace.register(asEventListener)
		info("Starting simulation")
		spawnInContext(typeof(Environment), innerContext, ctrl) 
		spawnInContext(typeof(TimeManager), innerContext)
	}
	
	on ConfigureSimulation {
		info("Configuration of the environment...") 
		this.boidsQuantity = occurrence.boidsQuantity
		this.map = occurrence.mapSelection
		this.boidsPopulation = occurrence.boidsPopulation
		this.boidsVision = occurrence.boidsVision;
		info('Map: ' + this.map)
		info('Boids quantity: ' + this.boidsQuantity)
		info('Boids population: ' + this.boidsPopulation)
		info('Boids vision: ' + this.boidsVision)
		this.generateMap()
	}
	
	/**
	 * Demande à la GUI de générer la map et fait débuter la simulation
	 * @return {void}
	 */
	def generateMap() : void {
		info('Generating map...')
		var obstacles : List<Obstacle> = new ArrayList()
		obstacles = ctrl.buildMap(this.map)
		innerContext.defaultSpace.emit(ID, new StartingSimulation())
	}
	
	on BoidsReady {
		info('Boids are ready !')
		var evt = new TimeManagingStart(Configuration::FREQUENCY) // TODO Fréquence en dur dans le fichier de configuration. Je pense qu'on peut laisser comme ça ? Donner la possibilité à l'utilisateur de la modifier peut entraîner des effets indésirables
		evt.source = new Address(innerContext.defaultSpace.spaceID, ID);
		innerContext.defaultSpace.emit(ID, evt)
	}


	on EndSimulation [!hasMemberAgent] {
		killMe
	}
	
	on EndSimulation [hasMemberAgent && !exited] {
		exited = true
		innerContext.defaultSpace.emit(ID, new EndSimulation)
	}
}
