package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import fr.utbm.boids.gui.fx.EndSimulation
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.ConfigureSimulation
import fr.utbm.boids.gui.BoidsFxViewerController
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.StartingSimulation
import fr.utbm.boids.events.GenerateMap
import fr.utbm.boids.events.MapParameters
import fr.utbm.boids.events.BoidsPositions
import java.util.List
import fr.utbm.boids.environment.Obstacle
import java.util.ArrayList
import io.sarl.core.MemberJoined
import fr.utbm.boids.events.BoidsReady
import fr.utbm.boids.events.SchedulerBeginsScheduling
import io.sarl.lang.core.Address

agent BootAgent {
	uses Logging, Behaviors, InnerContextAccess, Lifecycle, DefaultContextInteractions
	
	var map : int
	var boidsQuantity : int
	var boidsPopulation : int
	var boidsVision : int
	var exited : boolean = false
	var ctrl : BoidsFxViewerController = null;
	var grid : Object[]

	on Initialize {
		loggingName = "BootAgent-" + this.ID
		ctrl = occurrence.parameters.get(0) as BoidsFxViewerController
		ctrl.UISpace.register(asEventListener)
		//spawn(Environment, boidsQuantity)
		spawnInContext(typeof(Environment), innerContext, boidsQuantity) 
		info("Starting simulation")
		//spawn(Scheduler,ctrl)
		spawnInContext(typeof(Scheduler), innerContext, ctrl)
	}
	
	on ConfigureSimulation {
		info("Configuration of the environment...") 
		this.boidsQuantity = occurrence.boidsQuantity
		this.map = occurrence.mapSelection
		this.boidsPopulation = occurrence.boidsPopulation
		this.boidsVision = occurrence.boidsVision;
		info('Map: ' + this.map)
		info('Boids quantity: ' + this.boidsQuantity)
		info('Boids population: ' + this.boidsPopulation)
		info('Boids vision: ' + this.boidsVision)
		wake(new GenerateMap())
	}
	
	on GenerateMap {
		info('Generating map...');
		var obstacles : List<Obstacle> = new ArrayList()
		obstacles = ctrl.buildMap(this.map)
		info('ASAA: ' + obstacles)
		// emit(new MapParameters(ctrl.mapWidth, ctrl.mapHeight, obstacles))
		// emit(new BoidsPositions(grid))
		// emit(new StartingSimulation(boidsPopulation, boidsQuantity, boidsVision, 50))
		innerContext.defaultSpace.emit(ID, new MapParameters(ctrl.mapWidth, ctrl.mapHeight, obstacles))
		innerContext.defaultSpace.emit(ID, new BoidsPositions(grid))
		innerContext.defaultSpace.emit(ID, new StartingSimulation(boidsPopulation, boidsQuantity, boidsVision, 50))
	}
	
	on BoidsReady {
		info('Les boids sont prÃªts !')
		// innerContext.defaultSpace.emit(ID, new SchedulerBeginsScheduling(50))
		var evt = new SchedulerBeginsScheduling(50)
		evt.source = new Address(innerContext.defaultSpace.spaceID, ID);
		innerContext.defaultSpace.emit(ID, evt)
	}
	
	/*on ListVar {
		this.boidsList = occurrence.list
		ctrl.updateGraphics(boidsList);
	}*/

	on EndSimulation [!hasMemberAgent] {
		// info("The simulation has ended.")
		killMe
	}
	
	on EndSimulation [hasMemberAgent && !exited] {
		// info("JE VAIS TOUS LES TUER")
		// info(memberAgentCount)
		exited = true
		innerContext.defaultSpace.emit(ID, new EndSimulation)
	}
}
