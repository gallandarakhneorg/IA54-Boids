package fr.utbm.boids.agents

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.IsStarted
import io.sarl.core.Lifecycle
import fr.utbm.boids.events.EndSimulation
import fr.utbm.boids.events.StartingSimulation
import fr.utbm.boids.events.NeedDataBoids
import io.sarl.core.Schedules
import fr.utbm.boids.events.SendDataBoids
import fr.utbm.boids.events.BoidsToDisplay

agent Scheduler {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	
	var online : boolean //if the simulation is online or not
	
	//fréquence de rafraichissement en millisecondes
	var freqRafraichissement : long
	
	/*
	 * gestion des évènements
	 */

	on Initialize {
		loggingName = "Scheduler"
		info("The Scheduler is started.")
		emit(new IsStarted("Scheduler"))
	}

	on StartingSimulation {
		info("HEY")
		online = true
		this.freqRafraichissement = occurrence.freqRafraichissement * 10
		info(freqRafraichissement)

		in(this.freqRafraichissement) [
			info("je demande")
			emit(new NeedDataBoids())
		]
		
		/*while(online){		//need synchronized?
			in(this.freqRafraichissement)[
				info("je demande")
				emit(new NeedDataBoids())
			]
		}*/
	}

	on SendDataBoids{
		info(occurrence.lesBoids)
	}
	
	on BoidsToDisplay{
		info("j'ai reçu des boids à afficher : " + occurrence.boids)
		for (mesBoids : occurrence.boids.entrySet) {
			info("boid position : " + mesBoids.value.position)
		}
	}

	on EndSimulation {
		online = false
		killMe
	}

	on Destroy {
	}
	
}