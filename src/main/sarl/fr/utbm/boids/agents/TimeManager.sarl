package fr.utbm.boids.agents

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import fr.utbm.boids.gui.fx.EndSimulation
import fr.utbm.boids.events.TimeManagingStart
import fr.utbm.boids.events.Cycle
import fr.utbm.boids.events.Pause
import fr.utbm.boids.Configuration
import fr.utbm.boids.events.Resume

agent TimeManager {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules
	
	var online : boolean
	 
	on Initialize {
		loggingName = "Time Manager-" + this.ID
		info("The time manager is started.")
	}

	on TimeManagingStart {
		info("HEY")
		online = true
		
		task('Iterate').every(occurrence.frequency) [
			if(this.online)
				emit(new Cycle)	
		]
	}
	
	on Pause {
		//task('Iterate').cancel
		this.online = false
	}
	
	on Resume {
		/*task('Iterate').every(Configuration::FREQUENCY) [
			emit(new Cycle)
		]*/
		this.online = true
	}

	on EndSimulation {
		online = false
		task('Iterate').cancel
		killMe
	}

	on Destroy {
		
	}
}