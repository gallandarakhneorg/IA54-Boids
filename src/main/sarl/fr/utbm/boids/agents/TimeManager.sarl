package fr.utbm.boids.agents

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import fr.utbm.boids.gui.fx.EndSimulation
import fr.utbm.boids.events.TimeManagingStart
import fr.utbm.boids.events.Cycle
import fr.utbm.boids.events.Pause
import fr.utbm.boids.Configuration
import fr.utbm.boids.events.Resume
import fr.utbm.boids.gui.BoidsFxViewerController
import io.sarl.core.Behaviors
import io.sarl.util.OpenEventSpace

agent TimeManager {
	uses Logging, DefaultContextInteractions, Lifecycle, Schedules, Behaviors
	
	var online : boolean
	var UISpace : OpenEventSpace
	 
	on Initialize {
		loggingName = "Time Manager-" + this.ID
		this.UISpace = occurrence.parameters.get(0) as OpenEventSpace
		this.UISpace.register(asEventListener)
		info("The time manager is started.")
	}

	on TimeManagingStart {
		info("HEY")
		online = true
		
		task('Iterate').every(occurrence.frequency) [
			if(this.online)
				emit(new Cycle)	
		]
	}
	
	on Pause {
		if(online){
			info('PAUSE')
			task('Iterate').cancel
			this.online = false
		}
		
	}
	
	on Resume {
		if (!online) {
			this.online = true
			task('Iterate').every(Configuration::FREQUENCY) [
				if(this.online)
					emit(new Cycle)
			]
		}
	}

	on EndSimulation {
		online = false
		task('Iterate').cancel
		killMe
	}

	on Destroy {
		
	}
}