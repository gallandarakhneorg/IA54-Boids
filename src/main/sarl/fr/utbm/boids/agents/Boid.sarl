package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import java.util.Collection
import fr.utbm.boids.events.IsStarted
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.Vector
import java.util.Random
import fr.utbm.boids.events.ValidationDeplacement
import fr.utbm.boids.BoidBody
import fr.utbm.boids.events.InitBoidBody
import fr.utbm.boids.events.BoidBodyInitialized

agent Boid {
	uses Logging, DefaultContextInteractions

	var body : BoidBody
	
	/*
	 * gestion des évènements
	 */
	 
	on Initialize {
		loggingName = "Boid"
		info("A Boid agent was started.")
		emit(new IsStarted("Boid"))
	}
	
	on InitBoidBody {
		this.body = occurrence.body
		emit(new BoidBodyInitialized())
	}
	
	on StartPosition {
		var maPosition : Vector
		val rnd = new Random()
		var x = rnd.nextInt()
		var y = rnd.nextInt()
		//info("X, Y \n" + x + " " + y)
		x %= 50
		y = y % 50
		info("X, Y \n" + x + " " + y)
		maPosition = new Vector(x, y)
		emit(new ResultatDeplacement(maPosition))
	}

	// Si le déplacement est validé, on enregistre la nouvelle position du Boids, ainsi que sa nouvelle vitesse
	on ValidationDeplacement {
		this.body.position = occurrence.position
		this.body.vitesse = this.body.newVitesse
		info("Validation de la position")
	}
	
	@SuppressWarnings("equals_with_null")
	on DemandeDeplacement {
		
		/* 
		 * on récupère la liste des autres boids
		 */
		var otherBoids = occurrence.otherBoids
		var forceTot : Vector

		forceTot = new Vector(0, 0)
		
		/* 		 / \
		 *		/ !	\	 On suppose que le Boids que je suis a été supprimé de la liste
		 *	   /_____\
		 */	   
		if (otherBoids != null) {
			
			
			//on applique la séparation 
			forceTot.plus(separation(otherBoids))
			
			//on applique la cohésion
			forceTot.plus(cohesion(otherBoids))
			
			//on applique l'alignement
			forceTot.plus(alignement(otherBoids))
			
			//on applique la répulsion
			forceTot.plus(repulsion(otherBoids))
			
			//on applique la force résultant de la détection des obstacles
		 
			// TODO appliquer force obstacle
		}
		
		//on renvoie la nouvelle position du Boids
		emit(new ResultatDeplacement(appliquerForce(forceTot)))
	 
	}
	
	/*
	 * fonction qui permet de déterminer si le boids en question est visible dans notre perception
	 */
	 
	 def visible (b : BoidBody) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	tmp = new Vector(b.position)
	 	tmp.moins(this.body.position)
	 	
	 	// Si le boids est trop loin, on ne le voit pas 
	 	if (tmp.length() > this.body.distanceVisibilite){
	 		return false
	 	}
	 	
	 	tmp2 = new Vector(this.body.vitesse)
	 	
	 	tmp2.normaliser()
	 	//tmp2.fois(this.body.groupeVitesseMax)			//TODO m'expliquer pourquoi normaliser avait été changé et pourquoi on voulait faire une multiplication par la vitesseMax
	 	
	 	// pas dans le code du prof mais pourtant le vecteur doit l'être pour que la formule marche et ça me parraît pas être "logique" tmp soit déjà normaliser
	 	tmp.normaliser()
	 	//tmp.fois(this.body.groupeVitesseMax)
	 	
	 	if (tmp2.point(tmp) < this.body.angleVisibilite) {
	 		return false
	 	}
	 	
	 	return true
	 }
	 
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	//TODO test si non utilisation du test du groupe à une influence
	@SuppressWarnings("equals_with_null")
	def separation(otherBoids : Collection<BoidBody>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)

		for (boid : otherBoids) {
			if (boid != null && boid.groupe == this.body.groupe && visible(boid)) {
				tmp.setXY(this.body.position)
				tmp.moins(boid.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
			}
		}

		return force

	}

	@SuppressWarnings("equals_with_null")
	def cohesion(otherBoids : Collection<BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		
		for (boid : otherBoids) {
			if (boid != null && boid.groupe == this.body.groupe && visible(boid)){
				nbTot++
				force.plus(boid.position)
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.body.position)
		}
		
		return force
	}
	
	

	@SuppressWarnings("equals_with_null")
	def alignement(otherBoids : Collection<BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.groupe == this.body.groupe && visible(boid)) {
				nbTot++
				tmp.setXY(boid.vitesse)
				tmp.fois(1/tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		
		return force
		
	}

	@SuppressWarnings("equals_with_null")
	def repulsion(otherBoids : Collection<BoidBody>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.groupe != this.body.groupe && visible(boid)){
				tmp.setXY(this.body.position)
				tmp.moins(boid.position)
				len = tmp.length
				tmp.fois(1/(len*len))
				force.plus(tmp)
			}
		}
		
		return force
	}
	
	
	// retourne la position du boid après l'application de la force, stoque en mémoire la nouvelle vitesse du Boids
	def appliquerForce (force : Vector) : Vector{
		
		var newPosition : Vector
		
		// f = ma => a =f/m
		
		var acceleration : Vector 
		
		acceleration = new Vector(force)
		acceleration.fois(1/this.body.masse)
		
		this.body.newVitesse = new Vector(this.body.vitesse)
		this.body.newVitesse.plus(acceleration)
		
		//bornage de la vitesse
		if (this.body.newVitesse.length > this.body.groupeVitesseMax){
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		//maj position
		newPosition = new Vector(this.body.position)
		newPosition.plus(this.body.newVitesse)
		
		return newPosition
		
	}
}
