package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import java.util.Collection
import fr.utbm.boids.events.IsStarted
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.Vector
import java.util.Random

agent Boid {
	uses Logging, DefaultContextInteractions

	var position : Vector
	var vitesse : Vector
	var newVitesse : Vector
	var groupe : int
	var groupeVitesseMax : int
	var masse : int
	var angleVisibilite : int // défini dans Boid car chauqe individu peut avoir des caractéristiques différentes (dépendant de sa famille et de sa morfologie)
	var distanceVisibilite : int 
	
	/*
	 * gestion des évènements
	 */
	 
	 
	on Initialize {
		loggingName = "Boid"
		info("A Boid agent was started.")
		groupe =  new Integer(occurrence.parameters.get(0) as Integer)
		angleVisibilite = new Integer (occurrence.parameters.get(1) as Integer)
		distanceVisibilite = new Integer (occurrence.parameters.get(2) as Integer)
		
		// TODO ramener groupeVitesseMax et masse par une demande utilisateur
		groupeVitesseMax = 10
		masse = 2
		
		info ("group " + groupe)
		emit(new IsStarted("Boid", this))
	}
	
	on StartPosition {
		var maPosition : Vector
		val rnd = new Random()
		var x = rnd.nextInt()
		var y = rnd.nextInt()
		info("X, Y \n" + x + " " + y)
		x %= 50
		y = y % 50
		info("X, Y \n" + x + " " + y)
		maPosition = new Vector(x, y)
		emit(new ResultatDeplacement(maPosition, this))
	}

	// Si le déplacement est validé, on enregistre la nouvelle position du Boids, ainsi que sa nouvelle vitesse
	on ResultatDeplacement {
		this.position = occurrence.position
		vitesse = newVitesse
	}
	
	on DemandeDeplacement {
		
		/* 
		 * on récupère la liste des autres boids
		 */
		var otherBoids = occurrence.otherBoids
		var forceTot : Vector
		/* 		 / \
		 *		/ !	\	 On suppose que le Boids que je suis a été supprimé de la liste
		 *	   /_____\
		 */	   
		if (otherBoids != null) {
			

			forceTot = new Vector(0, 0)
			
			//on applique la séparation 
			forceTot.plus(separation(otherBoids))
			
			//on applique la cohésion
			forceTot.plus(cohesion(otherBoids))
			
			//on applique l'alignement
			forceTot.plus(alignement(otherBoids))
			
			//on applique la répulsion
			forceTot.plus(repulsion(otherBoids))
			
			//on applique la force résultant de la détection des obstacles
		 
			// TODO appliquer force obstacle
		}
		
		/*
		 * if(forceTot.length > this.group.vitesseMax){
		 * 	normaliser(forceTot, this.group.maxVitesse)
		 * 
		 */
		
		//on renvoie la nouvelle position du Boids
		emit(new ResultatDeplacement(appliquerForce(forceTot), this))
	 
	}
	
	
	/*
	 * GETTER
	 */
	 
	 def getPosition() : Vector {
	 	return this.position
	 }
	 
	 def getVitesse() : Vector {
	 	return this.vitesse
	 }
	 
	 def getGroupe () : int {
	 	return this.groupe
	 }
	 
	 def getAngleVisibilite () : int {
	 	return this.angleVisibilite
	 }

	def getDistanceVisibilite() : int {
		return this.distanceVisibilite
	}
	
	 /*
	  * SETTER 
	  */
	  
	def setPosition (p : Vector) : void{
	  	this.position = p
	}
	  
	def setVitesse (v : Vector) : void {
	  	this.vitesse = v
	}
	  
	def setGroupe (i : int) : void {
	 	this.groupe = i
	}
	  
	def setAngleVisibilite (i : int) : void {
	  	this.angleVisibilite = i
	}

	def setDistanceVisibilite(i : int) : void {
		this.distanceVisibilite = i
	}
	
	
	/*
	 * fonction qui permet de déterminer si le boids en question est visible dans notre perception
	 */
	 
	 def visible (b : Boid) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	tmp = new Vector(b.position)
	 	tmp.moins(position)
	 	
	 	// Si le boids est trop loin, on ne le voit pas 
	 	if (tmp.length() > this.distanceVisibilite){
	 		return false
	 	}
	 	
	 	tmp2 = new Vector(vitesse)
	 	
	 	tmp2.normaliser(this.groupeVitesseMax)
	 	
	 	// pas dans le code du prof mais pourtant le vecteur doit l'être pour que la formule marche et ça me parraît pas être "logique" tmp soit déjà normaliser
	 	tmp.normaliser(this.groupeVitesseMax)
	 	
	 	if (tmp2.point(tmp) < angleVisibilite) {
	 		return false
	 	}
	 	
	 	return true
	 }
	 
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	//TODO test si non utilisation du test du groupe à une influence
	def separation(otherBoids : Collection<Boid>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)

		for (boid : otherBoids) {
			if (boid != null && boid.groupe == this.groupe && visible(boid)) {
				tmp.setXY(position)
				tmp.moins(boid.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
			}
		}

		return force

	}

	def cohesion(otherBoids : Collection<Boid>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		
		for (boid : otherBoids) {
			if (boid != null && boid.groupe == this.groupe && visible(boid)){
				nbTot++
				force.plus(boid.position)
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.position)
		}
		
		return force
	}
	
	

	def alignement(otherBoids : Collection<Boid>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.groupe == this.groupe && visible(boid)) {
				nbTot++
				tmp.setXY(boid.vitesse)
				tmp.fois(1/tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		
		return force
		
	}

	def repulsion(otherBoids : Collection<Boid>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.groupe != this.groupe && visible(boid)){
				tmp.setXY(this.position)
				tmp.moins(boid.position)
				len = tmp.length
				tmp.fois(1/(len*len))
				force.plus(tmp)
			}
		}
		
		return force
	}
	
	
	// retourne la position du boid après l'application de la force, stoque en mémoire la nouvelle vitesse du Boids
	def appliquerForce (force : Vector) : Vector{
		
		var newPosition : Vector
		
		// f = ma => a =f/m
		
		var acceleration : Vector 
		
		acceleration = new Vector(force)
		acceleration.fois(1/masse)
		
		newVitesse = new Vector(vitesse)
		newVitesse.plus(acceleration)
		
		//bornage de la vitesse
		if (newVitesse.length > groupeVitesseMax){
			newVitesse.normaliser(1)
			newVitesse.fois(groupeVitesseMax)
		}
		
		//maj position
		newPosition = new Vector(position)
		newPosition.plus(newVitesse)
		
		return newPosition
		
	}
}
