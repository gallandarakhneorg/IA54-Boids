package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.util.Vector
import java.util.Random
import fr.utbm.boids.events.ValidationDeplacement
import fr.utbm.boids.body.BoidBody
import fr.utbm.boids.environment.Obstacle
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import javafx.geometry.Point2D
import io.sarl.core.Lifecycle
import java.util.UUID
import fr.utbm.boids.gui.fx.EndSimulation
import java.util.Map
import fr.utbm.boids.events.BoidInitialized
import fr.utbm.boids.body.EnvInfos
import java.util.HashMap
import java.util.List
import fr.utbm.boids.util.Sphere
import fr.utbm.boids.util.Edge

agent Boid {
	uses Logging, DefaultContextInteractions, Lifecycle


	/*
	 * Liste des variables 
	 */
	 
	 
	/** Le corps du boids */
	var body : BoidBody
	/** L'ID du parent (l'environnement) */
	var parentAgent : UUID
	/** Les informations relatives à l'environnement qui doivent être connues par le boids */
	var envInfos : EnvInfos
	
	
	
	/*
	 * gestion des évènements
	 */
	
	/**
	 * Evénement correspondant à la création du boids
	 */ 
	on Initialize {
		loggingName = "Boid-" + this.ID
		parentAgent = occurrence.spawner
		this.body = new BoidBody(this.ID, occurrence.parameters.get(0) as Integer, occurrence.parameters.get(1) as Integer, occurrence.parameters.get(2) as Integer, occurrence.parameters.get(3) as Integer, occurrence.parameters.get(4) as Integer)
		this.envInfos = occurrence.parameters.get(5) as EnvInfos
		emit(new BoidInitialized(this.body, 'Boid'))
	}
	
	
	/**
	 * Evénement qui permet aux boids de s'initialiser à un endroit aléatoire de la map avec une vitesse aléatoire. 
	 */
	on StartPosition {
		var validPosition : AtomicBoolean = new AtomicBoolean(true)
		var maPosition : Vector
		var rnd = new Random()
		var x : AtomicInteger = new AtomicInteger(0)
		var y : AtomicInteger = new AtomicInteger(0)
		var vx : AtomicInteger = new AtomicInteger(0)
		var vy : AtomicInteger = new AtomicInteger(0)	
		do {
			validPosition.set(true)
			x.set(rnd.nextInt(envInfos.width) + 1)
			y.set(rnd.nextInt(envInfos.height) + 1)
			occurrence.obstacles.forEach[o : Obstacle, index : int | 
				if(o.getPolygon().contains(new Point2D(x.get(), y.get()))) {
					validPosition.set(false)
				}
			]
		} while(validPosition.get() == false)
		
		maPosition = new Vector(x.get(), y.get())
		
		//définition d'une vitesse aléatoire 
		vx.set(rnd.nextInt(this.body.groupeVitesseMax))
		vy.set(rnd.nextInt(this.body.groupeVitesseMax))
		this.body.newVitesse = new Vector (vx.get(),vy.get())
		
		// vmax est en ligne droite, on vérifie qu'avec vx et vy on dépasse pas la longueur de vmax
		if (this.body.newVitesse.length > this.body.groupeVitesseMax) {
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		emit(new ResultatDeplacement(maPosition, this.body.newVitesse))
	}


	/** 
	 * Evénement qui lance le calcul de la future position du boids.
	 */
	@SuppressWarnings("equals_with_null")
	on DemandeDeplacement {

		var boids = occurrence.boids
		var forceTot : Vector

		forceTot = new Vector(0, 0)

		var visibleBoids : Map<UUID, BoidBody>
		var closeBoids : Map<UUID, BoidBody>

		closeBoids = perception(boids, 'close')
		visibleBoids = perception(closeBoids, 'visible')
		
		 
		if (boids != null) {

			// on applique la séparation
			forceTot.plus(separation(closeBoids))

			// on applique la cohésion
			forceTot.plus(cohesion(visibleBoids))

			// on applique l'alignement
			forceTot.plus(alignement(visibleBoids))

			// on applique la répulsion
			forceTot.plus(repulsion(visibleBoids))

			// on applique la force résultant de la détection des obstacles
			forceTot.plus(forceObstacles(occurrence.obstacles))

		}

		forceTot.fois(100000)

		emit(new ResultatDeplacement(appliquerForce(forceTot), this.body.newVitesse))
	}
	
	
	/** 
	 * Evénement qui permet à un boids de mettre à jour ses informations après la validation d'un déplacement par l'environnement. 
	 * Les valeurs misent à jour sont la position et la vitesse.
	 */
	on ValidationDeplacement {
		this.body.position = occurrence.position
		this.body.vitesse = this.body.newVitesse
	}
	
	
	/**
	 * Evénement signalant la fin de  la simulation, qui aura pour conséquence de détruire notre agent.
	 */
	on EndSimulation [isFrom(this.parentAgent)] {
		emit(new EndSimulation)[it.UUID == this.parentAgent]
		killMe
	}
	
	
	/*
	 * Fonctions du boids
	 */
	 
	 
	 /** 
	 * Fonction qui permet de déterminer si un boids est dans le cône de vision de notre boids.Basé uniquement sur l'angle de visibilité de la famille de boids.
	  * @param b Le boids pour lequel on vérifie la présence dans le cône de vision.
	  * @return true si le boids est dans le cône, false sinon.
	  */
	 def visible (b : BoidBody) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	tmp = new Vector(b.position)
	 	tmp.moins(this.body.position)
	 	
	 	tmp2 = new Vector(this.body.vitesse)
	 	
	 	// Si l'un des deux vecteurs est nul, on aura une erreur sur le test suivant par défaut, on renvoi false
	 	if (tmp2.length == 0 || tmp.length == 0){
	 		return false
	 	}
	 	
	 	// on test si le boids est hors de l'angle de vision : cos(ABC) = vec(AB).vec(AC)/(AB*AC)
	 	if (Math.toDegrees(Math.acos((tmp2.point(tmp)/(tmp2.length * tmp.length)))) > this.body.angleVisibilite) {
	 		return false
	 	}else{
	 		return true
	 	}
	 }
	 

	/**
	 * Fonction qui permet de dire si un boids est dans l'espace de perception de notre boids. Basé sur la distance de visibilité de la famille de boids.
	 * @param b Le boids pour lequel on vérifie la présence dans le cercle de perception.
	 * @return true si le boids est dans le cercle, false sinon.
	 */
	def proche(b : BoidBody) : boolean {
		var tmp : Vector

		tmp = new Vector(b.position)
		tmp.moins(this.body.position)
		if (tmp.length() > this.body.distanceVisibilite) {
			return false
		}
		return true
	}
	 
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	 
	 /**
	  * Fonction qui permet aux boids d'une même famille de garder une distance minimale entre eux.
	  * @param boids La liste des boids qui sont dans le champ de perception et qui peuvent exercer une force sur notre propre boids.
	  * @return La force de séparation résultante des intéractions avec les boids de la même famille.
	  */
	@SuppressWarnings("equals_with_null")
	def separation(boids : Map<UUID, BoidBody>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double
		var xelem : double
		var yelem : double
		var tmpelem : Vector

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {			 		
				tmpelem = new Vector(xelem%envInfos.width, yelem%envInfos.height)
				tmp.setXY(this.body.position)
				//tmp.moins(tmpelem)
				tmp.moins(elem.value.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				//force.fois(35)
			}
		}
	
		return force

	}
	
	
	/** 
	 * Fonction qui permet aux boids d'une même famille de se regrouper.
	 * @param boids La liste des boids qui sont dans le cône de vision et qui peuvent exercer une force sur notre propre boids.
	 * @return La force d'attraction résultante des intéractions avec les boids de la même famille.
	 */
	@SuppressWarnings("equals_with_null")
	def cohesion(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				force.plus(elem.value.position)
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.body.position)
		}
		//force.fois(0.45)
		force.fois(25)
		return force
	}
	
	
	/** 
	 * Fonction qui permet aux boids d'une même famille de s'aligner.
	 * @param boids La liste des boids qui sont dans le cône de vision et qui peuvent exercer une force sur notre propre boids.
	 * @return La force d'alignement résultante des intéractions avec les boids de la même famille.
	 */
	@SuppressWarnings("equals_with_null")
	def alignement(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				tmp.setXY(elem.value.position)
				tmp.fois(1 / tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		force.fois(50)
		return force
		
	}
	
	
	/** 
	 * Fonction qui permet aux boids de familles différentes de se repousser. 
	 * @param boids La liste des boids qui sont dans le cône de vision et qui peuvent exercer une force sur notre propre boids.
	 * @return La force de répulsion résultante des intéractions avec les boids des autres familles.
	 */
	@SuppressWarnings("equals_with_null")
	def repulsion(boids : Map<UUID, BoidBody>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe != this.body.groupe) {
				tmp.setXY(this.body.position)
				tmp.moins(elem.value.position)
				len = tmp.length
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				force.fois(100)
			}
		}
		
		return force
	}
	
	
	/** 
	 * Fonction qui permet aux boids de s'éloigner d'un obstacle. 
	 * On regarde si la droite d'un obstacle rentre dans notre champs de perception, si c'est le cas, on regarde quelle droite et la plus proche et 
	 * on choisit sa force normale comme force d'éloignement.
	 * @param listeObstacles La liste des obstacles présents sur la map.
	 * @return La force d'éloignement résultante des intéractions avec les obstacles proches.
	 */
	@SuppressWarnings("equals_with_null")
	def forceObstacles(listeObstacles : List<Obstacle>) : Vector{
		
		var force : Vector
		force = new Vector(0,0)
		
		var sphereBoid = new Sphere(new Vector(this.body.position), this.body.distanceVisibilite.doubleValue)
		
		if (listeObstacles !== null) {
			for (o : listeObstacles) {
				var forceAdd : Vector
				var distanceMin : double
				distanceMin = 10000
				var edgeRetenue : Edge 
				edgeRetenue = null
				
				for (e : o.edges) {
					if (intersectRaySphere(e,sphereBoid)){
						
						// Si on interphère on calcul la distance entre la droite et le point et on garde le plus proche
							if (calculateDistancePointRay(e,this.body.position) < distanceMin){
								edgeRetenue = e
								distanceMin = calculateDistancePointRay(e, this.body.position)
							}
					}
				}
				
				if (edgeRetenue != null) {
					forceAdd = new Vector(edgeRetenue.normal)
					forceAdd.fois(1000/distanceMin)
					force.plus(forceAdd)
				}
				 
			}
			
		}
		
		return force
		
		
	}
	
	
	/**
	 * Fonction permettant de définir la distance entre un point et une droite
	 * D'après wikipédia : distance d'un point à une droite / Dans l'espace
	 * @param edge La droite pour laquelle on doit mesurer la distance avec le point.
	 * @param point Le point pour lequel on doit mesurer la distance avec la droite.
	 * @return La distance entre le point et la droite passés en paramètre. 
	 */
	def calculateDistancePointRay (edge : Edge, point : Vector) : double {
		var distance : double 
		// B point sur la droite : edge.pointDepart  A point considéré : point 
		var vecteurBA = new Vector (point.x - edge.pointDepart.x, point.y - edge.pointDepart.y)
		distance = vecteurBA.produitVectoriel(edge.direction).length
		distance = distance / (edge.direction.length)
		return distance
	}
	

	/**
	 * Fonction permettant de savoir si une droite rentre en intersection avec une sphere.
	 * D'après le pdf de Christer Ericson : Real Time Detection Collision.
	 * @param edge La droite pour laquelle on test l'intersection avec la sphere.
	 * @param s La sphere pour laquelle on test l'intersection avec la droite.
	 * @return true si la droite rentre en collision avec la sphere, false sinon.
	 */
	def intersectRaySphere(edge : Edge, s : Sphere) : boolean {
		var m : Vector
		var directionNormalise : Vector

		m = new Vector(edge.pointDepart.x, edge.pointDepart.y)

		m.moins(s.center)

		directionNormalise = new Vector(edge.direction)
		directionNormalise.normaliser

		var b = m.point(directionNormalise)
		var c = m.point(m) - s.radius * s.radius
		if (c > 0.0f && b> 0.0f) {
			return false
		}

		var discr = b * b - c

		if (discr < 0.0f) {
			return false
		}
		
		var t = -b - Math.sqrt(discr)

		if (Math.abs(t) > edge.direction.length) {
			return false
		}

		return true	
	}


	/**
	 * Fonction qui donne la nouvelle position du boids après application d'une force. 
	 * Stocke en mémoire la nouvelle vitesse du boids.
	 * @param force La force appliquée sur le boids.
	 * @return La nouvelle position du boids. 
	 */
	def appliquerForce(force : Vector) : Vector {

		// f = ma => a = f/m

		var newPosition : Vector		
		var acceleration : Vector

		// TODO trouver un compromis pour borner mais pas trop bas pour pouvoir utiliser la masse et avoir une force correcte quand même
		if (force.length > 10) {
			force.normaliser()
			force.fois(10)
		}

		acceleration = new Vector(force)
		acceleration.fois(1/ this.body.masse.doubleValue)
		
		this.body.newVitesse = new Vector(this.body.vitesse)
		this.body.newVitesse.plus(acceleration)
		
		//bornage de la vitesse
		if (this.body.newVitesse.length > this.body.groupeVitesseMax){
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		//maj position
		newPosition = new Vector(this.body.position)
		newPosition.plus(this.body.newVitesse)
		return newPosition
	}
	

	/**
	 * Fonction permettant de déterminer la liste des boids présent dans le champ de perception, ainsi que dans le champ de vision de notre boids.
	 * @param boids La liste de tous les boids pour lesquels on va faire le test de proximité et de visibilité. 
	 * @param mode Le mode à utiliser : <br/>
	 * - 'visible' pour faire un test de visibilité <br/>
	 * - 'close' pour faire un test de proximité
	 * @return La liste des boids qui répondent aux critères du paramètres (assez proche où dans l'angle de vision).
	 */		
	def perception(boids : Map<UUID, BoidBody>, mode : String) : Map<UUID, BoidBody> {
		if (mode === 'visible') {
			var visibleBoids = new HashMap<UUID, BoidBody>
			for (elem : boids.entrySet) {
				if (elem.key !== null && visible(elem.value) && elem.key != this.ID) {
					visibleBoids.put(elem.key, elem.value)
				}
			}
			return visibleBoids
		} else if (mode === 'close') {
			var closeBoids = new HashMap<UUID, BoidBody>
			for (elem : boids.entrySet) {
				if (elem.key !== null && proche(elem.value) && elem.key != this.ID) {
					closeBoids.put(elem.key, elem.value)
				}
			}
			return closeBoids
		}
		
	}
	
}
