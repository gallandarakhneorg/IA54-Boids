package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.Vector
import java.util.Random
import fr.utbm.boids.events.ValidationDeplacement
import fr.utbm.boids.BoidBody
import fr.utbm.boids.environment.Obstacle
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import javafx.geometry.Point2D
import io.sarl.core.Lifecycle
import java.util.UUID
import fr.utbm.boids.gui.fx.EndSimulation
import java.util.Map
import fr.utbm.boids.events.BoidInitialized
import fr.utbm.boids.EnvInfos
import java.util.HashMap
import fr.utbm.boids.events.PositionModification
import java.util.List

agent Boid {
	uses Logging, DefaultContextInteractions, Lifecycle

	var body : BoidBody
	var parentAgent : UUID
	var envInfos : EnvInfos
	var visibleBoids : Map<UUID, BoidBody>
	var closeBoids : Map<UUID, BoidBody>
	
	/*
	 * gestion des évènements
	 */
	 
	on Initialize {
		loggingName = "Boid-" + this.ID
		info("A Boid agent was started.")
		parentAgent = occurrence.spawner
		this.body = new BoidBody(this.ID, occurrence.parameters.get(0) as Integer, occurrence.parameters.get(1) as Integer, occurrence.parameters.get(2) as Integer, occurrence.parameters.get(3) as Integer, occurrence.parameters.get(4) as Integer)
		this.envInfos = occurrence.parameters.get(5) as EnvInfos
		this.visibleBoids = new HashMap<UUID, BoidBody>
		this.closeBoids = new HashMap<UUID, BoidBody>
		emit(new BoidInitialized(this.body, 'Boid'))
	}
	
	on StartPosition {
		var validPosition : AtomicBoolean = new AtomicBoolean(true)
		var maPosition : Vector
		var rnd = new Random()
		var x : AtomicInteger = new AtomicInteger(0)
		var y : AtomicInteger = new AtomicInteger(0)
		var vx : AtomicInteger = new AtomicInteger(0)
		var vy : AtomicInteger = new AtomicInteger(0)	
		do {
			validPosition.set(true)
			x.set(rnd.nextInt(envInfos.width) + 1)
			y.set(rnd.nextInt(envInfos.height) + 1)
			occurrence.obstacles.forEach[o : Obstacle, index : int | 
				if(o.getPolygon().contains(new Point2D(x.get(), y.get()))) {
					validPosition.set(false)
				}
			]
		} while(validPosition.get() == false)
		
		maPosition = new Vector(x.get(), y.get())
		
		//définition d'une vitesse aléatoire 
		vx.set(rnd.nextInt(this.body.groupeVitesseMax))
		vy.set(rnd.nextInt(this.body.groupeVitesseMax))
		this.body.newVitesse = new Vector (vx.get(),vy.get())
		
		// vmax est en ligne droite, on vérifie qu'avec vx et vy on dépasse pas la longueur de vmax
		if (this.body.newVitesse.length > this.body.groupeVitesseMax) {
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		emit(new ResultatDeplacement(maPosition, this.body.newVitesse))
	}

	// Si le déplacement est validé, on enregistre la nouvelle position du Boids, ainsi que sa nouvelle vitesse
	on ValidationDeplacement {
		this.body.position = occurrence.position
		this.body.vitesse = this.body.newVitesse
	}
	
	@SuppressWarnings("equals_with_null")
	on DemandeDeplacement {
		
		var boids = occurrence.boids
		var forceTot : Vector

		forceTot = new Vector(0, 0)

		closeBoids = perception(boids, 'close')
		visibleBoids = perception(closeBoids, 'visible')
		
		 
		if (boids != null) {
			
			//on applique la séparation 
			forceTot.plus(separation(visibleBoids))
			
			//on applique la cohésion
			forceTot.plus(cohesion(visibleBoids))				
			
			//on applique l'alignement
			forceTot.plus(alignement(visibleBoids))

			//on applique la répulsion
			forceTot.plus(repulsion(closeBoids))
			
			// on applique la force résultant de la détection des obstacles
			forceTot.plus(forceObstacles(occurrence.obstacles, forceTot))
		 
			// TODO appliquer force obstacle
		}
		
		//forceTot.fois(100000)
		//info("force totale " + forceTot)

		emit(new ResultatDeplacement(appliquerForce(forceTot), this.body.newVitesse))
	 
	}
	
	/*
	 * fonction qui permet de déterminer si le boids en question est visible dans notre perception
	 */
	 
	 def visible (b : BoidBody) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	
	 	tmp = new Vector(b.position)
	 	tmp.moins(this.body.position)
	 	
	 	tmp2 = new Vector(this.body.vitesse)
	 	
	 	// on test si le boids est hors de l'angle de vision : cos(ABC) = vec(AB).vec(AC)/(AB*AC)
	 	if (Math.abs(Math.toDegrees(Math.acos((tmp2.point(tmp)/(tmp2.length * tmp.length))))) > this.body.angleVisibilite) {
	 		return false
	 	}else{
	 		return true
	 	}
	 }

	def proche(b : BoidBody) : boolean {
		var tmp : Vector

		tmp = new Vector(b.position)
		tmp.moins(this.body.position)
		if (tmp.length() > this.body.distanceVisibilite) {
			return false
		}
		return true
	}
	 
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	@SuppressWarnings("equals_with_null")
	def separation(boids : Map<UUID, BoidBody>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double
		var xelem : double
		var yelem : double
		var tmpelem : Vector

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				
				/*if(distance(this.body.position.x, elem.value.position.x) < distance(this.body.position.x, elem.value.position.x - envInfos.width)){
					if(distance(this.body.position.x, elem.value.position.x) < distance(this.body.position.x, elem.value.position.x + envInfos.width)){
						xelem = elem.value.position.x
					} else {
						xelem = elem.value.position.x + envInfos.width
					}
				} else {
					if(distance(this.body.position.x, elem.value.position.x - envInfos.width) < distance(this.body.position.x, elem.value.position.x + envInfos.width)){
						xelem = elem.value.position.x - envInfos.width
					} else {
						xelem = elem.value.position.x + envInfos.width
					}
				}
				
				if (distance(this.body.position.y, elem.value.position.y) < distance(this.body.position.y, elem.value.position.y - envInfos.height)) {
					if (distance(this.body.position.y, elem.value.position.y) < distance(this.body.position.y, elem.value.position.y + envInfos.height)) {
						yelem = elem.value.position.y
					} else {
						yelem = elem.value.position.y + envInfos.height
					}
				} else {
					if (distance(this.body.position.y, elem.value.position.y - envInfos.height) < distance(this.body.position.y, elem.value.position.y + envInfos.height)) {
						yelem = elem.value.position.y - envInfos.height
					} else {
						yelem = elem.value.position.y + envInfos.height
					}
				 }*/
					 
				
				tmpelem = new Vector(xelem%envInfos.width, yelem%envInfos.height)
				tmp.setXY(this.body.position)
				//tmp.moins(tmpelem)
				tmp.moins(elem.value.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				//force.fois(35)
			}
		}
	
		return force

	}

	@SuppressWarnings("equals_with_null")
	def cohesion(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				force.plus(elem.value.position)
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.body.position)
		}
		force.fois(0.45)
		return force
	}
	
	

	@SuppressWarnings("equals_with_null")
	def alignement(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				tmp.setXY(elem.value.position)
				tmp.fois(1 / tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		force.fois(50)
		return force
		
	}

	@SuppressWarnings("equals_with_null")
	def repulsion(boids : Map<UUID, BoidBody>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe != this.body.groupe) {
				tmp.setXY(this.body.position)
				tmp.moins(elem.value.position)
				len = tmp.length
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				force.fois(100)
			}
		}
		
		return force
	}
	
	def forceObstacles(listeObstacles : List<Obstacle>, force : Vector) : Vector{
		
		/*var direction = new Vector(0,0)
		var direction2 = new Vector(0,0)
		var tmp = new Vector(0,0)
		var collision : Vector = new Vector(this.body.vitesse)*/
		
		if (listeObstacles !== null) {
			listeObstacles.forEach [ o : Obstacle, index : int |
				/*if (obstacleVisible(o)) {
					direction.plus(o.getCenter())
					direction2.plus(new Vector(this.body.position.x, this.body.position.y))
					direction.moins(direction2)
					tmp.plus(direction)
					tmp.normaliser
					force.moins(tmp)
				}*/
				 
				// Si le boid vient de droite, répulsion vers la droite, si il vient de la gauche, répulsion vers la gauche, si il vient du haut, répulsion vers le haut, si il vient du bas, répulsion vers le bas.
				// --> Diviser la bouding box(carré) en 4 parties haut bas gauche droite pour discerner ces cas
				// Appliquer une force dans pour faire partir le boids dans la direction inverse
				/*if(this.body.position.y <= o.polygon.boundsInLocal.maxY - 50) {
					if (o.polygon.boundsInLocal.contains(this.body.position.x, this.body.position.y)) {
						force.plus(o.center)
						force.normaliser()
					} 
				} else if(this.body.position.y >= o.polygon.boundsInLocal.minY + 50) {
					if (o.polygon.boundsInLocal.contains(this.body.position.x, this.body.position.y)) {
						force.moins(o.center)
						force.normaliser()
					}
				}*/
				
			]
		}
		return force
	}
	
	def obstacleVisible (obstacle : Obstacle) : boolean {
		var tmp : Vector
		tmp = obstacle.getCenter()
		tmp.moins(this.body.position)
		if(tmp.length < this.body.distanceVisibilite*2){
			return true
		} else {
			return false
		}
	}
	
	// retourne la position du boid après l'application de la force, stoque en mémoire la nouvelle vitesse du Boids
	def appliquerForce(force : Vector) : Vector {

		// f = ma => a =f/m

		var newPosition : Vector		
		var acceleration : Vector

		if (force.length > 1.7) {
			force.normaliser()
			force.fois(1.7)
		}
		
		acceleration = new Vector(force)
		//acceleration.fois(1/this.body.masse)
		
		this.body.newVitesse = new Vector(this.body.vitesse)
		this.body.newVitesse.plus(acceleration)
		
		//bornage de la vitesse
		if (this.body.newVitesse.length > this.body.groupeVitesseMax){
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		//maj position
		newPosition = new Vector(this.body.position)
		newPosition.plus(this.body.newVitesse)
		return newPosition
	}
	
	def distance(XA : double, XB : double){
		return Math.abs(XA - XB)
	}
	
	on EndSimulation [isFrom(this.parentAgent)] {
		emit(new EndSimulation) [it.UUID == this.parentAgent]
		killMe
	}
		
	def perception(boids : Map<UUID, BoidBody>, mode : String) : Map<UUID, BoidBody> {
		if (mode === 'visible') {
			visibleBoids.clear()
			for (elem : boids.entrySet) {
				if (elem.key !== null && visible(elem.value) && elem.key != this.ID) {
					visibleBoids.put(elem.key, elem.value)
				}
			}
			return visibleBoids
		} else if (mode === 'close') {
			closeBoids.clear()
			for (elem : boids.entrySet) {
				if (elem.key !== null && proche(elem.value) && elem.key != this.ID) {
					closeBoids.put(elem.key, elem.value)
				}
			}
			return closeBoids
		}
		
	}
	
	on PositionModification {
		this.body.position.x = occurrence.x
		this.body.position.y = envInfos.height - occurrence.y
	}
	
}
