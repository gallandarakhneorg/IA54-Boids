package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.events.DemandeDeplacement
import fr.utbm.boids.events.StartPosition
import fr.utbm.boids.events.ResultatDeplacement
import fr.utbm.boids.util.Vector
import java.util.Random
import fr.utbm.boids.events.ValidationDeplacement
import fr.utbm.boids.BoidBody
import fr.utbm.boids.environment.Obstacle
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicInteger
import javafx.geometry.Point2D
import io.sarl.core.Lifecycle
import java.util.UUID
import fr.utbm.boids.gui.fx.EndSimulation
import java.util.Map
import fr.utbm.boids.events.BoidInitialized
import fr.utbm.boids.EnvInfos
import java.util.HashMap
import java.util.List
import fr.utbm.boids.util.Sphere
import fr.utbm.boids.util.Edge

agent Boid {
	uses Logging, DefaultContextInteractions, Lifecycle

	var body : BoidBody
	var parentAgent : UUID
	var envInfos : EnvInfos
	var visibleBoids : Map<UUID, BoidBody>
	var closeBoids : Map<UUID, BoidBody>
	
	/*
	 * gestion des évènements
	 */
	 
	on Initialize {
		loggingName = "Boid-" + this.ID
		parentAgent = occurrence.spawner
		this.body = new BoidBody(this.ID, occurrence.parameters.get(0) as Integer, occurrence.parameters.get(1) as Integer, occurrence.parameters.get(2) as Integer, occurrence.parameters.get(3) as Integer, occurrence.parameters.get(4) as Integer)
		this.envInfos = occurrence.parameters.get(5) as EnvInfos
		this.visibleBoids = new HashMap<UUID, BoidBody>
		this.closeBoids = new HashMap<UUID, BoidBody>
		emit(new BoidInitialized(this.body, 'Boid'))
	}
	
	on StartPosition {
		var validPosition : AtomicBoolean = new AtomicBoolean(true)
		var maPosition : Vector
		var rnd = new Random()
		var x : AtomicInteger = new AtomicInteger(0)
		var y : AtomicInteger = new AtomicInteger(0)
		var vx : AtomicInteger = new AtomicInteger(0)
		var vy : AtomicInteger = new AtomicInteger(0)	
		do {
			validPosition.set(true)
			x.set(rnd.nextInt(envInfos.width) + 1)
			y.set(rnd.nextInt(envInfos.height) + 1)
			occurrence.obstacles.forEach[o : Obstacle, index : int | 
				if(o.getPolygon().contains(new Point2D(x.get(), y.get()))) {
					validPosition.set(false)
				}
			]
		} while(validPosition.get() == false)
		
		maPosition = new Vector(x.get(), y.get())
		
		//définition d'une vitesse aléatoire 
		vx.set(rnd.nextInt(this.body.groupeVitesseMax))
		vy.set(rnd.nextInt(this.body.groupeVitesseMax))
		this.body.newVitesse = new Vector (vx.get(),vy.get())
		
		// vmax est en ligne droite, on vérifie qu'avec vx et vy on dépasse pas la longueur de vmax
		if (this.body.newVitesse.length > this.body.groupeVitesseMax) {
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		emit(new ResultatDeplacement(maPosition, this.body.newVitesse))
	}

	// Si le déplacement est validé, on enregistre la nouvelle position du Boids, ainsi que sa nouvelle vitesse
	on ValidationDeplacement {
		this.body.position = occurrence.position
		this.body.vitesse = this.body.newVitesse
	}
	
	@SuppressWarnings("equals_with_null")
	on DemandeDeplacement {
		
		var boids = occurrence.boids
		var forceTot : Vector

		forceTot = new Vector(0, 0)

		closeBoids.clear()
		visibleBoids.clear()
		
		closeBoids = perception(boids, 'close')
		visibleBoids = perception(closeBoids, 'visible')
		
		 
		if (boids != null) {
			
			//on applique la séparation 
			forceTot.plus(separation(closeBoids))
			
			//on applique la cohésion
			forceTot.plus(cohesion(visibleBoids))				
			
			//on applique l'alignement
			forceTot.plus(alignement(visibleBoids))

			//on applique la répulsion
			forceTot.plus(repulsion(visibleBoids))
			
			// on applique la force résultant de la détection des obstacles
			forceTot.plus(forceObstacles(occurrence.obstacles))
		
		}
		
		forceTot.fois(100000)

		emit(new ResultatDeplacement(appliquerForce(forceTot), this.body.newVitesse))
	 
	}
	
	/*
	 * fonction qui permet de déterminer si le boids en question est visible dans notre perception
	 */
	 
	 def visible (b : BoidBody) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	
	 	tmp = new Vector(b.position)
	 	tmp.moins(this.body.position)
	 	
	 	tmp2 = new Vector(this.body.vitesse)
	 	
	 	// Si l'un des deux vecteurs est nul, on aura une erreur sur le test suivant par défaut, on renvoi false
	 	if (tmp2.length == 0 || tmp.length == 0){
	 		return false
	 	}
	 	
	 	// on test si le boids est hors de l'angle de vision : cos(ABC) = vec(AB).vec(AC)/(AB*AC)
	 	if (Math.toDegrees(Math.acos((tmp2.point(tmp)/(tmp2.length * tmp.length)))) > this.body.angleVisibilite) {
	 		return false
	 	}else{
	 		return true
	 	}
	 }

	def proche(b : BoidBody) : boolean {
		var tmp : Vector

		tmp = new Vector(b.position)
		tmp.moins(this.body.position)
		if (tmp.length() > this.body.distanceVisibilite) {
			return false
		}
		return true
	}
	 
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	@SuppressWarnings("equals_with_null")
	def separation(boids : Map<UUID, BoidBody>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double
		var xelem : double
		var yelem : double
		var tmpelem : Vector

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {			 		
				tmpelem = new Vector(xelem%envInfos.width, yelem%envInfos.height)
				tmp.setXY(this.body.position)
				//tmp.moins(tmpelem)
				tmp.moins(elem.value.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				//force.fois(35)
			}
		}
	
		return force

	}

	@SuppressWarnings("equals_with_null")
	def cohesion(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		 
		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				force.plus(elem.value.position)
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.body.position)
		}
		//force.fois(0.45)
		force.fois(25)
		return force
	}
	
	

	@SuppressWarnings("equals_with_null")
	def alignement(boids : Map<UUID, BoidBody>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe == this.body.groupe) {
				nbTot++
				tmp.setXY(elem.value.position)
				tmp.fois(1 / tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		force.fois(50)
		return force
		
	}

	@SuppressWarnings("equals_with_null")
	def repulsion(boids : Map<UUID, BoidBody>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)

		for (elem : boids.entrySet) {
			if (elem.key != null && elem.value.groupe != this.body.groupe) {
				tmp.setXY(this.body.position)
				tmp.moins(elem.value.position)
				len = tmp.length
				tmp.fois(1 / (len * len))
				force.plus(tmp)
				force.fois(100)
			}
		}
		
		return force
	}

	@SuppressWarnings("equals_with_null")
	def forceObstacles(listeObstacles : List<Obstacle>) : Vector{
		
		var force : Vector
		force = new Vector(0,0)
		
		var sphereBoid = new Sphere(new Vector(this.body.position), this.body.distanceVisibilite.doubleValue)
		
		if (listeObstacles !== null) {
			for (o : listeObstacles) {
				var forceAdd : Vector
				var distanceMin : double
				distanceMin = 10000
				var edgeRetenue : Edge 
				edgeRetenue = null
				
				for (e : o.edges) {
					if (intersectRaySphere(e,sphereBoid)){
						
						// Si on interphère on calcul la distance entre la droite et le point et on garde le plus proche
							if (calculateDistancePointRay(e,this.body.position) < distanceMin){
								edgeRetenue = e
								distanceMin = calculateDistancePointRay(e, this.body.position)
							}
					}
				}
				
				if (edgeRetenue != null) {
					forceAdd = new Vector(edgeRetenue.normal)
					forceAdd.fois(1000/distanceMin)
					force.plus(forceAdd)
				}
				 
			}
			
		}
		
		return force
		
		
	}
	
	// d'après wikipédia : distance d'un point à une droite / Dans l'espace
	def calculateDistancePointRay (edge : Edge, point : Vector) : double {
		var distance : double 
		// B point sur la droite : edge.pointDepart  A point considéré : point 
		var vecteurBA = new Vector (point.x - edge.pointDepart.x, point.y - edge.pointDepart.y)
		distance = vecteurBA.produitVectoriel(edge.direction).length
		distance = distance / (edge.direction.length)
		return distance
	}
	

	// voir pdf real time collission detection de Christer Ericson
	def intersectRaySphere(edge : Edge, s : Sphere) : boolean {
		var m : Vector
		var directionNormalise : Vector

		m = new Vector(edge.pointDepart.x, edge.pointDepart.y)

		m.moins(s.center)

		directionNormalise = new Vector(edge.direction)
		directionNormalise.normaliser

		var b = m.point(directionNormalise)
		var c = m.point(m) - s.radius * s.radius
		if (c > 0.0f && b> 0.0f) {
			return false
		}

		var discr = b * b - c

		if (discr < 0.0f) {
			return false
		}
		
		var t = -b - Math.sqrt(discr)

		if (Math.abs(t) > edge.direction.length) {
			return false
		}

		return true	
	}

	// retourne la position du boid après l'application de la force, stoque en mémoire la nouvelle vitesse du Boids
	def appliquerForce(force : Vector) : Vector {

		// f = ma => a =f/m

		var newPosition : Vector		
		var acceleration : Vector

		// TODO trouver un compromis pour borner mais pas trop bas pour pouvoir utiliser la masse et avoir une force correcte quand même
		if (force.length > 10) {
			force.normaliser()
			force.fois(10)
		}

		acceleration = new Vector(force)
		acceleration.fois(1/ this.body.masse.doubleValue)
		
		this.body.newVitesse = new Vector(this.body.vitesse)
		this.body.newVitesse.plus(acceleration)
		
		//bornage de la vitesse
		if (this.body.newVitesse.length > this.body.groupeVitesseMax){
			this.body.newVitesse.normaliser()
			this.body.newVitesse.fois(this.body.groupeVitesseMax)
		}
		
		//maj position
		newPosition = new Vector(this.body.position)
		newPosition.plus(this.body.newVitesse)
		return newPosition
	}
	
	on EndSimulation [isFrom(this.parentAgent)] {
		emit(new EndSimulation) [it.UUID == this.parentAgent]
		killMe
	}
		
	def perception(boids : Map<UUID, BoidBody>, mode : String) : Map<UUID, BoidBody> {
		if (mode === 'visible') {
			for (elem : boids.entrySet) {
				if (elem.key !== null && visible(elem.value) && elem.key != this.ID) {
					visibleBoids.put(elem.key, elem.value)
				}
			}
			return visibleBoids
		} else if (mode === 'close') {
			for (elem : boids.entrySet) {
				if (elem.key !== null && proche(elem.value) && elem.key != this.ID) {
					closeBoids.put(elem.key, elem.value)
				}
			}
			return closeBoids
		}
		
	}
	
}
