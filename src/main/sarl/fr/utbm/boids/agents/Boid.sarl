package fr.utbm.boids.agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import fr.utbm.boids.Vector
import java.util.Collection
import fr.utbm.boids.events.IsStarted
import fr.utbm.boids.events.DemandeDeplacement

agent Boid {
	uses Logging, DefaultContextInteractions

	var position : Vector
	var vitesse : Vector
	var groupe : int
	var angleVisibilite : int 			// défini dans Boid car chauqe individu peut avoir des caractéristiques différentes (dépendant de sa famille et de sa morfologie)
	var distanceVisibilite : int 
	
	/*
	 * gestion des évènements
	 */
	on Initialize {
		info("A Boid agent was started.")
		emit(new IsStarted())
	}

	on DemandeDeplacement {
		
		/* 
		 * on récupère la liste des autres boids
		 */
		var otherBoids = occurrence.otherBoids
		
		/* 		 / \
		 *		/ !	\	 On suppose que le Boids que je suis a été supprimé de la liste
		 *	   /_____\
		 */	   
		if (otherBoids != null) {
			var forceTot : Vector

			forceTot = new Vector(0, 0)
			
			//on applique la séparation 
			forceTot.plus(separation(otherBoids))
			
			//on applique la cohésion
			forceTot.plus(cohesion(otherBoids))
			
			//on applique l'alignement
			forceTot.plus(alignement(otherBoids))
			
			//on applique la répulsion
			forceTot.plus(repulsion(otherBoids))
			
			//on applique la force résultant de la détection des obstacles
		 
			// TODO
		}
		
		
		// on peut renvoyer la force à l'environnement ... ou 
		
		//on renvoie la nouvelle position du Boids
		//emit(new ResultatDeplacement(position))
	 
	}
	
	
	/*
	 * GETTER
	 */
	 
	 def getPosition() : Vector {
	 	return this.position
	 }
	 
	 def getVitesse() : Vector {
	 	return this.vitesse
	 }
	 
	 def getGroupe () : int {
	 	return this.groupe
	 }
	 
	 def getAngleVisibilite () : int {
	 	return this.angleVisibilite
	 }

	def getDistanceVisibilite() : int {
		return this.distanceVisibilite
	}
	
	 /*
	  * SETTER 
	  */
	  
	def setPosition (p : Vector) : void{
	  	this.position = p
	}
	  
	def setVitesse (v : Vector) : void {
	  	this.vitesse = v
	}
	  
	def setGroupe (i : int) : void {
	 	this.groupe = i
	}
	  
	def setAngleVisibilite (i : int) : void {
	  	this.angleVisibilite = i
	}

	def setDistanceVisibilite(i : int) : void {
		this.distanceVisibilite = i
	}
	
	
	/*
	 * fonction qui permet de déterminer si le boids en question est visible dans notre perception
	 */
	 
	 def visible (b : Boid) : boolean{
	 	
	 	var tmp : Vector
	 	var tmp2 : Vector
	 	
	 	tmp = new Vector(b.getPosition)
	 	tmp.moins(position)
	 	
	 	// Si le boids est trop loin, on ne le voit pas 
	 	if (tmp.length() > this.distanceVisibilite){
	 		return false
	 	}
	 	
	 	tmp2 = new Vector(vitesse)
	 	tmp2.normaliser
	 	
	 	// pas dans le code du prof mais pourtant le vecteur doit l'être pour que la formule marche et ça me parraît pas être "logique" tmp soit déjà normaliser
	 	tmp.normaliser 
	 	
	 	if (tmp2.point(tmp) < angleVisibilite) {
	 		return false
	 	}
	 	
	 	return true
	 }
	
	/* 
	 * Création des fonctions comportementales du Boids
	 */
	 
	 
	def separation(otherBoids : Collection<Boid>) : Vector {

		var force : Vector
		var tmp : Vector
		var len : double

		force = new Vector(0, 0)
		tmp = new Vector(0, 0)

		for (boid : otherBoids) {
			if (boid != null && boid.getGroupe == this.groupe && visible(boid)) {
				tmp.setXY(position)
				tmp.moins(boid.position)
				len = tmp.length()
				tmp.fois(1 / (len * len))
				force.plus(tmp)
			}
		}

		return force

	}

	def cohesion(otherBoids : Collection<Boid>) : Vector {
		
		var nbTot = 0 
		var force : Vector 
		
		force = new Vector(0,0)
		
		for (boid : otherBoids) {
			if (boid != null && boid.getGroupe == this.groupe && visible(boid)){
				nbTot++
				force.plus(boid.getPosition())
			}
		}
		
		if (nbTot > 0){
			force.fois(1/nbTot)
			force.moins(this.position)
		}
		
		return force
	}
	
	

	def alignement(otherBoids : Collection<Boid>) : Vector {
		
		var nbTot = 0 
		var force : Vector
		var tmp : Vector
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.getGroupe == this.groupe && visible(boid)) {
				nbTot++
				tmp.setXY(boid.getVitesse)
				tmp.fois(1/tmp.length)
				force.plus(tmp)
			}
		}
		
		if (nbTot > 0) {
			force.fois(1/nbTot)	
		}
		
		return force
		
	}

	def repulsion(otherBoids : Collection<Boid>) : Vector {
		
		var force : Vector
		var tmp : Vector
		var len : double
		
		force = new Vector(0,0)
		tmp = new Vector(0,0)
		
		for (boid : otherBoids){
			if (boid != null && boid.getGroupe != this.groupe && visible(boid)){
				tmp.setXY(this.position)
				tmp.moins(boid.getPosition)
				len = tmp.length
				tmp.fois(1/(len*len))
				force.plus(tmp)
			}
		}
		
		return force
	}
	
}
