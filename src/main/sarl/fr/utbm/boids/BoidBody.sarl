package fr.utbm.boids

import java.util.UUID
import fr.utbm.boids.util.Vector

class BoidBody extends EnvObjet{

	/** UUID de l'agent à qui appartient le corps */
	var id : UUID
	/** Vitesse du boids */
	var vitesse : Vector
	/** Future vitesse du boids si le déplacement est accepté par l'environnement */
	var newVitesse : Vector
	/** Groupe auquel appartient le boids */
	var groupe : int
	/** Vitesse max possible pour le boids */
	var groupeVitesseMax : int
	/** Masse du boids */
	var masse : int
	/** L'angle de vision du boids */
	var angleVisibilite : int 
	/** La distance de vision et de perception du boids */
	var distanceVisibilite : int
	
	/**
	 * Création d'une instance BoidBody
	 * @param id - L'UUID de l'agent à qui appartient le corps
	 * @param groupe - Le groupe auquel appartient le boids
	 * @param groupeVitesseMax - La vitesse max que pourra avoir le boids
	 * @param masse - La masse du boids
	 * @param angleVisibilite - L'angle de vision que le boids aura
	 * @param distanceVisibilite - La distance de vision et de perception dont disposera le boids
	 */
	new (id: UUID, groupe : int, groupeVitesseMax : int, masse : int, angleVisibilite : int, distanceVisibilite : int){
		this.id = id
		this.groupe = groupe
		this.groupeVitesseMax = groupeVitesseMax
		this.masse = masse
		this.angleVisibilite = angleVisibilite
		this.distanceVisibilite = distanceVisibilite
		this.vitesse = new Vector(0,0)
	}
	
	/**
	 * Création d'une instance Boidbody par copie
	 * @param body - La corps à copier
	 */
	new (body : BoidBody) {
		this.groupe = body.groupe
		this.groupeVitesseMax = body.groupeVitesseMax
		this.masse = body.masse
		this.angleVisibilite = body.angleVisibilite
		this.distanceVisibilite = body.distanceVisibilite
	}
	
	/*
	 * GETTER
	 */
	 
	 /**
	  * @return L'UUID de l'agent qui possède le corps
	  */
	 def getID() : UUID {
	 	return this.id
	 }

	/**
	 * @return La vitesse du boids
	 */
	def getVitesse() : Vector {
		return this.vitesse
	}

	/**
	 * @return Le groupe auquel appartient le boids
	 */
	def getGroupe() : int {
		return this.groupe
	}

	/**
	 * @return L'angle de vision du boids
	 */
	def getAngleVisibilite() : int {
		return this.angleVisibilite
	}

	/**
	 * @return La distance de vision et de perception du boids
	 */
	def getDistanceVisibilite() : int {
		return this.distanceVisibilite
	}
	
	/**
	 * @return La vitesse maximum du boids
	 */
	def getGroupeVitesseMax() : int {
		return this.groupeVitesseMax
	}

	/**
	 * @return La future vitesse du boids
	 */	
	def getNewVitesse () : Vector {
		return this.newVitesse
	}
	
	/**
	 * @return La masse du boids
	 */
	def getMasse() : int {
		return this.masse
	}
	
	/* 
	 * SETTER 
	 */
	 
	 /**
	  * Permet de setter l'UUID de l'agent qui possède ce corps
	  * @param id - L'UUID de l'agent à enregistrer
	  */
	 def setID(id : UUID) : void {
	 	this.id = id
	 }

	/**
	 * Permet de setter la vitesse du boids
	 * @param v - La vitesse à enregistrer
	 */
	def setVitesse(v : Vector) : void {
		this.vitesse = v
	}
	
	/** 
	 * Permet de setter le groupedu boids
	 * @param i - Le groupe à enregistrer
	 */
	def setGroupe(i : int) : void {
		this.groupe = i
	}
	
	/** 
	 * Permet de setter l'angle de vision du boids
	 * @param i - L'angle de vision à enregistrer
	 */
	def setAngleVisibilite(i : int) : void {
		this.angleVisibilite = i
	}
	
	/** 
	 * Permet de setter la distance de vision et de perception du boids
	 * @param i - La distance de vision et de perception à enregistrer
	 */
	def setDistanceVisibilite(i : int) : void {
		this.distanceVisibilite = i
	}
	
	/** 
	 * Permet de setter la vitesse maximum du boids
	 * @param vMax - La vitesse maximum à enregistrer
	 */
	def setGroupeVitesseMax(vMax : int) : void {
		this.groupeVitesseMax = vMax
	}
	
	/** 
	 * Permet de setter la future vitesse du boids
	 * @param newV - La future vitesse à enregistrer
	 */
	def setNewVitesse(newV : Vector) : void {
		this.newVitesse = newV
	}
	
	/** 
	 * Permet de setter la masse du boids
	 * @param m - La masse à enregistrer
	 */
	def setMasse(m : int) : void {
		this.masse = m
	}

	/**
	 * Permet de convertir un BoidBody en une chaîne de caractères.
	 * @return La chaîne de caractères correspondant au BoidBody
	 */
	@SuppressWarnings("equals_with_null")
	def toString () : String{
		
		var retour : String 
		
		retour = super.toString
		retour += if (this.vitesse != null) ", vitesse : " + this.vitesse.toString else "" 
		retour += if (this.newVitesse != null) ", newVitesse : " + this.newVitesse.toString else ""
		retour += ", groupe : " + this.groupe
		retour += ", groupeVitesseMax : " + this.groupeVitesseMax
		retour += ", masse : " + this.masse
		retour += ", angleVisibilite : " + this.angleVisibilite
		retour += ", distanceVisibilite : " + this.distanceVisibilite
		
		return retour
	}
}
