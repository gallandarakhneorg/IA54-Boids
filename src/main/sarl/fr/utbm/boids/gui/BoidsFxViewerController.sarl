package fr.utbm.boids.gui

import fr.utbm.boids.gui.fx.FxViewerController
import javafx.fxml.FXML
import fr.utbm.boids.events.ConfigureSimulation
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar
import javafx.scene.control.Button
import javafx.scene.Group
import javafx.scene.layout.Pane
import javafx.application.Platform
import javafx.scene.shape.Polygon
import fr.utbm.boids.util.Coordinates
import fr.utbm.boids.util.LineTool
import com.google.common.util.concurrent.AtomicDouble
import java.util.ArrayList
import java.util.List
import fr.utbm.boids.environment.Obstacle
import fr.utbm.boids.BoidBody
import java.util.Collection
import javafx.scene.shape.Circle
import javafx.scene.paint.Color
import fr.utbm.boids.Configuration
import javafx.scene.control.ToggleButton
import javafx.scene.layout.Background
import javafx.scene.layout.BackgroundFill
import javafx.scene.layout.CornerRadii
import javafx.geometry.Insets
import javafx.scene.effect.Glow
import javafx.scene.input.MouseEvent
import javafx.^event.EventHandler
import javafx.scene.shape.Rectangle
import fr.utbm.boids.events.Pause
import fr.utbm.boids.events.Resume
import javafx.scene.shape.Arc
import javafx.scene.shape.ArcType
import javafx.scene.control.TextField
import javafx.scene.shape.Line
import java.util.UUID
import javafx.scene.image.ImageView
import javafx.scene.control.ScrollPane
import fr.utbm.boids.util.BoidGroupInfos
import javafx.scene.layout.AnchorPane

class BoidsFxViewerController extends FxViewerController  {

	var launched = false
	var mapCreated = false

	@FXML var main_pane : Pane
	@FXML var boids_group : Group // Groupe contenant les boids
	@FXML var UI_pane : Pane // Pane contenant l'UI
	@FXML var obstacle_group : Group // Groupe contenant les obstacles
	@FXML var perception_group : Group // Groupe contenant les champs de perceptions des boids
	
	@FXML var toggle_night_mode : ToggleButton
	@FXML var toggle_perception : ToggleButton
	@FXML var start_button : Button
	@FXML var night_mode_indicator : Circle
	@FXML var perception_indicator : Circle

	// Titres
	@FXML var boids_quantity_label : Label
	@FXML var boids_population_label : Label

	// Input
	@FXML var boids_quantity_input : ScrollBar
	@FXML var boids_population_input : TextField

	// Valeurs
	@FXML var boids_quantity_display : Label
	
	@FXML var boids_quantity_min : Label
	@FXML var boids_quantity_max : Label
	
	@FXML var pause_button : Rectangle
	@FXML var resume_button : Polygon
	@FXML var boid_group : Label
	@FXML var boid_vitesse : Label
	@FXML var boid_new_vitesse : Label
	@FXML var boid_group_vitesse : Label
	@FXML var boid_angle : Label
	@FXML var boid_distance : Label
	@FXML var boid_masse : Label
	@FXML var boid_position : Label
	@FXML var hide_infos : Button
	@FXML var boids_infos_pane : Pane
		
	@FXML var boids_population_line : Line
	@FXML var increment_boids_population : Label
	@FXML var decrement_boids_population : Label
	@FXML var boids_population_increment_circle : Circle
	@FXML var boids_population_decrement_circle : Circle
	
	@FXML var preview_map_1 : ImageView
	@FXML var preview_map_2 : ImageView
	@FXML var preview_map_1_border : Rectangle
	@FXML var preview_map_2_border : Rectangle
	@FXML var map_label_1 : Label
	@FXML var map_label_2 : Label
	
	@FXML var simulation_parameters_pane : Pane
	@FXML var map_selection_pane : Pane
	@FXML var tick_map_1 : ImageView
	@FXML var tick_map_2 : ImageView
	
	@FXML var pane_group_1 : Pane
	@FXML var pane_group_2 : Pane
	@FXML var pane_group_3 : Pane
	@FXML var pane_group_4 : Pane
	@FXML var pane_group_5 : Pane
	@FXML var pane_group_6 : Pane
	@FXML var pane_group_7 : Pane
	@FXML var pane_group_8 : Pane
	
	@FXML var group_label_1 : Label
	@FXML var group_label_2 : Label
	@FXML var group_label_3 : Label
	@FXML var group_label_4 : Label
	@FXML var group_label_5 : Label
	@FXML var group_label_6 : Label
	@FXML var group_label_7 : Label
	@FXML var group_label_8 : Label
	
	@FXML var mass_label_1 : Label
	@FXML var mass_label_2 : Label
	@FXML var mass_label_3 : Label
	@FXML var mass_label_4 : Label
	@FXML var mass_label_5 : Label
	@FXML var mass_label_6 : Label
	@FXML var mass_label_7 : Label
	@FXML var mass_label_8 : Label
	@FXML var mass_1 : ScrollBar
	@FXML var mass_2 : ScrollBar
	@FXML var mass_3 : ScrollBar
	@FXML var mass_4 : ScrollBar
	@FXML var mass_5 : ScrollBar
	@FXML var mass_6 : ScrollBar
	@FXML var mass_7 : ScrollBar
	@FXML var mass_8 : ScrollBar
	@FXML var mass_min_1 : Label
	@FXML var mass_max_1 : Label
	@FXML var mass_display_1 : Label
	@FXML var mass_min_2 : Label
	@FXML var mass_max_2 : Label
	@FXML var mass_display_2 : Label
	@FXML var mass_min_3 : Label
	@FXML var mass_max_3 : Label
	@FXML var mass_display_3 : Label
	@FXML var mass_min_4 : Label
	@FXML var mass_max_4 : Label
	@FXML var mass_display_4 : Label
	@FXML var mass_min_5 : Label
	@FXML var mass_max_5 : Label
	@FXML var mass_display_5 : Label
	@FXML var mass_min_6 : Label
	@FXML var mass_max_6 : Label
	@FXML var mass_display_6 : Label
	@FXML var mass_min_7 : Label
	@FXML var mass_max_7 : Label
	@FXML var mass_display_7 : Label
	@FXML var mass_min_8 : Label
	@FXML var mass_max_8 : Label
	@FXML var mass_display_8 : Label
	
	@FXML var speed_label_1 : Label
	@FXML var speed_1 : ScrollBar
	@FXML var speed_min_1 : Label
	@FXML var speed_max_1 : Label
	@FXML var speed_display_1 : Label
	@FXML var speed_label_2 : Label
	@FXML var speed_2 : ScrollBar
	@FXML var speed_min_2 : Label
	@FXML var speed_max_2 : Label
	@FXML var speed_display_2 : Label
	@FXML var speed_label_3 : Label
	@FXML var speed_3 : ScrollBar
	@FXML var speed_min_3 : Label
	@FXML var speed_max_3 : Label
	@FXML var speed_display_3 : Label
	@FXML var speed_label_4 : Label
	@FXML var speed_4 : ScrollBar
	@FXML var speed_min_4 : Label
	@FXML var speed_max_4 : Label
	@FXML var speed_display_4 : Label
	@FXML var speed_label_5 : Label
	@FXML var speed_5 : ScrollBar
	@FXML var speed_min_5 : Label
	@FXML var speed_max_5 : Label
	@FXML var speed_display_5 : Label
	@FXML var speed_label_6 : Label
	@FXML var speed_6 : ScrollBar
	@FXML var speed_min_6 : Label
	@FXML var speed_max_6 : Label
	@FXML var speed_display_6 : Label
	@FXML var speed_label_7 : Label
	@FXML var speed_7 : ScrollBar
	@FXML var speed_min_7 : Label
	@FXML var speed_max_7 : Label
	@FXML var speed_display_7 : Label
	@FXML var speed_label_8 : Label
	@FXML var speed_8 : ScrollBar
	@FXML var speed_min_8 : Label
	@FXML var speed_max_8 : Label
	@FXML var speed_display_8 : Label
	
	@FXML var angle_label_1 : Label
	@FXML var angle_1 : ScrollBar
	@FXML var angle_min_1 : Label
	@FXML var angle_max_1 : Label
	@FXML var angle_display_1 : Label
	@FXML var angle_label_2 : Label
	@FXML var angle_2 : ScrollBar
	@FXML var angle_min_2 : Label
	@FXML var angle_max_2 : Label
	@FXML var angle_display_2 : Label
	@FXML var angle_label_3 : Label
	@FXML var angle_3 : ScrollBar
	@FXML var angle_min_3 : Label
	@FXML var angle_max_3 : Label
	@FXML var angle_display_3 : Label
	@FXML var angle_label_4 : Label
	@FXML var angle_4 : ScrollBar
	@FXML var angle_min_4 : Label
	@FXML var angle_max_4 : Label
	@FXML var angle_display_4 : Label
	@FXML var angle_label_5 : Label
	@FXML var angle_5 : ScrollBar
	@FXML var angle_min_5 : Label
	@FXML var angle_max_5 : Label
	@FXML var angle_display_5 : Label
	@FXML var angle_label_6 : Label
	@FXML var angle_6 : ScrollBar
	@FXML var angle_min_6 : Label
	@FXML var angle_max_6 : Label
	@FXML var angle_display_6 : Label
	@FXML var angle_label_7 : Label
	@FXML var angle_7 : ScrollBar
	@FXML var angle_min_7 : Label
	@FXML var angle_max_7 : Label
	@FXML var angle_display_7 : Label
	@FXML var angle_label_8 : Label
	@FXML var angle_8 : ScrollBar
	@FXML var angle_min_8 : Label
	@FXML var angle_max_8 : Label
	@FXML var angle_display_8 : Label
	
	@FXML var distance_label_1 : Label
	@FXML var distance_1 : ScrollBar
	@FXML var distance_min_1 : Label
	@FXML var distance_max_1 : Label
	@FXML var distance_display_1 : Label
	@FXML var distance_label_2 : Label
	@FXML var distance_2 : ScrollBar
	@FXML var distance_min_2 : Label
	@FXML var distance_max_2 : Label
	@FXML var distance_display_2 : Label
	@FXML var distance_label_3 : Label
	@FXML var distance_3 : ScrollBar
	@FXML var distance_min_3 : Label
	@FXML var distance_max_3 : Label
	@FXML var distance_display_3 : Label
	@FXML var distance_label_4 : Label
	@FXML var distance_4 : ScrollBar
	@FXML var distance_min_4 : Label
	@FXML var distance_max_4 : Label
	@FXML var distance_display_4 : Label
	@FXML var distance_label_5 : Label
	@FXML var distance_5 : ScrollBar
	@FXML var distance_min_5 : Label
	@FXML var distance_max_5 : Label
	@FXML var distance_display_5 : Label
	@FXML var distance_label_6 : Label
	@FXML var distance_6 : ScrollBar
	@FXML var distance_min_6 : Label
	@FXML var distance_max_6 : Label
	@FXML var distance_display_6 : Label
	@FXML var distance_label_7 : Label
	@FXML var distance_7 : ScrollBar
	@FXML var distance_min_7 : Label
	@FXML var distance_max_7 : Label
	@FXML var distance_display_7 : Label
	@FXML var distance_label_8 : Label
	@FXML var distance_8 : ScrollBar
	@FXML var distance_min_8 : Label
	@FXML var distance_max_8 : Label
	@FXML var distance_display_8 : Label
	
	@FXML var advanced_settings_pane : ScrollPane
	@FXML var advanced_settings_anchor_pane : AnchorPane
	@FXML var map_selection_label : Label
	@FXML var settings_label : Label
	@FXML var advanced_settings_label : Label
	@FXML var see_advanced_settings_label : Label
	@FXML var reset_group_values : Label
	
	var selectedMap : int = 1
	var boidsSettings : List<BoidGroupInfos> = new ArrayList()

	var polygons : List<Polygon>
	var polygonsCoordinates : List<List<Coordinates>>
	var obstacles : List<Obstacle> = new ArrayList()
	var nightMode : Boolean = true
	var togglePerception : Boolean = true
	var currentBoid: UUID
	var perceptions : List<Arc> = new ArrayList()

	def getBoidsQuantity() : int {
		boids_quantity_input.value as int
	}
	
	def getMapSelection() : int {
		return this.selectedMap
	}
	
	def getBoidsPopulation() : int {
		//boids_population_input.value as int
		Integer.parseInt(boids_population_input.text)
	}
	
	def getMapWidth() : int {
		main_pane.width as int
	}
	
	def getMapHeight() : int {
		main_pane.height as int
	}
	
	def getObstacles() : List<Obstacle> {
		obstacles
	}
	
	def getBoidsSettings() : List<BoidGroupInfos> {
		return this.boidsSettings
	}
 
	@FXML protected def startSimu() : void {
		if(boids_population_input.text != '' && outputQuality(boids_population_input.text)) { 
			for(var i : int = 1; i < this.boidsPopulation + 1; i++) {
				if(i == 1) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_1.text), Integer.parseInt(speed_display_1.text), Integer.parseInt(angle_display_1.text), Integer.parseInt(distance_display_1.text)))
				} else if (i == 2) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_2.text),Integer.parseInt(speed_display_2.text), Integer.parseInt(angle_display_2.text), Integer.parseInt(distance_display_2.text)))
				} else if (i == 3) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_3.text), Integer.parseInt(speed_display_3.text), Integer.parseInt(angle_display_3.text), Integer.parseInt(distance_display_3.text)))
				} else if (i == 4) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_4.text), Integer.parseInt(speed_display_4.text), Integer.parseInt(angle_display_4.text), Integer.parseInt(distance_display_4.text)))
				} else if (i == 5) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_5.text), Integer.parseInt(speed_display_5.text), Integer.parseInt(angle_display_5.text), Integer.parseInt(distance_display_5.text)))
				} else if (i == 6) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_6.text), Integer.parseInt(speed_display_6.text), Integer.parseInt(angle_display_6.text), Integer.parseInt(distance_display_6.text)))
				} else if (i == 7) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_7.text), Integer.parseInt(speed_display_7.text), Integer.parseInt(angle_display_7.text), Integer.parseInt(distance_display_7.text)))
				} else if (i == 8) {
					boidsSettings.add(new BoidGroupInfos(Integer.parseInt(mass_display_8.text), Integer.parseInt(speed_display_8.text), Integer.parseInt(angle_display_8.text), Integer.parseInt(distance_display_8.text)))
				}
			}
			var ^event = new ConfigureSimulation(this.mapSelection, this.boidsQuantity, this.boidsPopulation)
			if (!launched) {
				startAgentApplication() [
					emitToAgents(^event)
				]
				launched = true
				mapCreated = false
				toggleUIState()
				toggleMenuUIVisibility()
				toggleSimuUIVisibility()
				toggle_night_mode.background = new Background(new BackgroundFill(Color.TRANSPARENT, CornerRadii.EMPTY, Insets.EMPTY))
				if(nightMode) {
					toggle_night_mode.textFill = Color.rgb(191, 191, 191, 0.3)
				} else {
					toggle_night_mode.textFill = Color.rgb(0, 0, 0, 0.3)
				}		
			} else {
				emitToAgents(^event)
			}
		}
	}
	
	def buildMap(map : int) : List<Obstacle> {

		pause_button.visible = true

		if(map == 1) {
			return new ArrayList()
		}
		else if (map == 2) {
			this.polygons = new ArrayList()
			this.polygonsCoordinates = new ArrayList()
			this.obstacles = new ArrayList()
			this.polygons.add(new Polygon(250.0, 200.0, 365.0, 250.0, 400.0, 300.0, 325.0, 400.0, 205.0, 225.0))
			this.polygons.add(new Polygon(605.0, 80.0, 675.0, 65.0, 680.0, 125.0, 650.0, 220.0, 630.0, 250.0, 660.0, 130.0,
					665.0, 75.0, 615.0, 95.0, 560.0, 240.0, 560.0, 205.0, 605.0, 80.0))
			this.polygons.add(new Polygon(450.0, 450.0, 575.0, 500.0, 575.0, 420.0, 700.0, 500.0, 590.0, 450.0, 590.0, 520.0))
			this.polygons.forEach[p : Polygon |
				this.polygonsCoordinates.add(this.generateCoordinates(p))
				p.setFill(Color.GRAY)
				p.setStroke(Color.TRANSPARENT)
				p.setStrokeWidth(20)
			]

			var command = new Runnable() {
				@Override
				def run() {
					polygons.forEach [ p : Polygon |
						obstacle_group.getChildren().add(0, p)
					]
					/*System.out.println('LE TEST')
					var testcircle = new Circle(395, 310, 1)
					//System.out.println(polygons.get(0).contains(new Point2D(testcircle.centerX, testcircle.centerY)))
					 * obstacle_group.getChildren().add(0, testcircle)
					 */
					 // TODO ici'a fai
					/*var boidElement : Polygon = new Polygon(200, 200 - 7.5, 200 + 5, 200 + 7.5, 200 - 5, 200 + 7.5)
					boidElement.rotate = Math.toDegrees(Math.atan(1/8))
					obstacle_group.getChildren().add(0, boidElement)*/
				}
		};

			if (Platform.isFxApplicationThread()) {
				command.run();
				this.generateObstacles()
				// this.obstacles.forEach[o : Obstacle|System.out.println(o.toString())]
				return this.obstacles
			} else {
				Platform.runLater(command);
				this.generateObstacles()
				// this.obstacles.forEach[o : Obstacle|System.out.println(o.toString())]
				return this.obstacles
			}
		}
	}
	
	def generateCoordinates(p : Polygon) : List<Coordinates> {
		var abscissa : AtomicDouble = new AtomicDouble();
		var coordinates : List<Coordinates> = new ArrayList()
		p.getPoints.forEach [ ordered : Double, index : int |
			if (index % 2 == 0) {
				abscissa.set(ordered)
			} else {
				coordinates.add(new Coordinates(abscissa.get(), ordered.doubleValue()))
			}
		]
		return coordinates
	}
	
	def generateObstacles() : void {
		this.polygonsCoordinates.forEach [p : List<Coordinates>, currentItem : int |
			var lines : List<LineTool> = new ArrayList()
			p.forEach[c : Coordinates, index : int |
				if(index != 0) {
					var line : LineTool = new LineTool(p.get(index - 1), c)
					line.computeLineEquation()
					lines.add(line)
				}
			]
			var line : LineTool = new LineTool(p.last, p.get(0))
			line.computeLineEquation()
			lines.add(line)
			this.obstacles.add(new Obstacle(lines, this.polygons.get(currentItem)))
		]
		
	}
	
	def updateGraphics(list: Collection<BoidBody>) : void {
		var command = new Runnable() {
			@Override
			def run() {
				perception_group.getChildren().clear()
				boids_group.getChildren().clear()
				perceptions.clear()
				for (boid : list){
					var boidElement : Polygon = new Polygon(boid.position.x, getMapHeight - boid.position.y - 7.5, boid.position.x + 5, getMapHeight - boid.position.y + 7.5, boid.position.x - 5, getMapHeight -  boid.position.y + 7.5)
					var angleRotation = Math.toDegrees(Math.atan(boid.vitesse.x / boid.vitesse.y))
					if (angleRotation < 0){
						angleRotation += 180
					}
					if (boid.vitesse.x < 0 ){
						if (boid.vitesse.y < 0 ){
							angleRotation -= 180
						}else{
							angleRotation += 180
						}
					 }
					
					boidElement.rotate = angleRotation
					boidElement.setFill(Configuration::COLOR_FAMILY.get(boid.groupe))
					
					boidElement.setOnMousePressed(new EventHandler<MouseEvent>() {
						def handle(^event : MouseEvent) {
							currentBoid = boid.ID
							updateInfos(boid)
							showInfosVisibility()
						}
					}); 
					
					if(togglePerception) {
						var perceptionArc = new Arc()
						perceptionArc.setCenterX(boid.position.x);
						perceptionArc.setCenterY(getMapHeight - boid.position.y);
						perceptionArc.setRadiusX(boid.distanceVisibilite as double);
						perceptionArc.setRadiusY(boid.distanceVisibilite as double);
						perceptionArc.setStartAngle(90 - angleRotation - boid.angleVisibilite)
						perceptionArc.setLength(boid.angleVisibilite * 2);
						perceptionArc.setType(ArcType.ROUND);
						if(nightMode) {
							perceptionArc.fill = Color.rgb(255, 245, 112, 0.2)
						} else {
							perceptionArc.fill = Color.rgb(255, 245, 112, 0.8)
						}
						boids_group.getChildren().add(0, boidElement)
						perception_group.getChildren.add(0, perceptionArc)
						perceptions.add(perceptionArc)
					} else {
						boids_group.getChildren.add(0, boidElement)
					}
				}

				if (boids_infos_pane.visible) {
					var boidBody : BoidBody = list.findFirst[item | item.ID == currentBoid]
					updateInfos(boidBody)
				}
				
			}
		}
		
		if (Platform.isFxApplicationThread()) {
			command.run();
		} else {
			Platform.runLater(command);
		}	
	}

	@FXML protected def actionBoidsQuantityDisplay() : void {
		boids_quantity_input.valueProperty().addListener [
			boids_quantity_display.setText(String.format("%.0f", boids_quantity_input.getValue()));
		];
	}
	
	@FXML protected def resetBoidsPopulation() : void {
		boids_population_input.text = ''
	}
	
	@FXML protected def updateBoidsPopulation() : void {
		if(boids_population_input.text != '') {
			if (outputQuality(boids_population_input.text)) {
				var currentValue : int = Integer.parseInt(boids_population_input.text)
				if (currentValue >= 8) {
					boids_population_input.text = '' + 8
				} else if (currentValue <= 1) {
					boids_population_input.text = '' + 1
				}
				showGroupConfiguration()
			}
		}
	}
	
	@FXML protected def incrementBoidsPopulation() : void {
		if(boids_population_input.text != '' && outputQuality(boids_population_input.text)) {
			var currentValue : int = Integer.parseInt(boids_population_input.text)
			if(currentValue >= 8) {
				boids_population_input.text = '' + 8
			} else {
				boids_population_input.text = '' + (currentValue + 1)
			}
			showGroupConfiguration()
		} else {
			boids_population_input.text = '' + 1
		}
	}
	
	@FXML protected def decrementBoidsPopulation() : void {
		if(boids_population_input.text != '' && outputQuality(boids_population_input.text)) {
			var currentValue : int = Integer.parseInt(boids_population_input.text)
			if(currentValue <= 1) {
				boids_population_input.text = '' + 1
			} else {
				boids_population_input.text = '' + (currentValue - 1)
			}
			showGroupConfiguration()
		} else {
			boids_population_input.text = '' + 1
		}
	}
	
	@FXML protected def toggleMode() : void {
		if(nightMode) {
			nightMode = false
			night_mode_indicator.fill = Color.TRANSPARENT
			night_mode_indicator.stroke = Color.rgb(0, 0, 0, 0.3)
			perception_indicator.stroke = Color.rgb(0, 0, 0, 0.3)
			var normalTextColor : Color = Color.BLACK
			main_pane.background = new Background(new BackgroundFill(Color.rgb(244, 244, 244), CornerRadii.EMPTY, Insets.EMPTY))
			boids_quantity_label.textFill = normalTextColor; boids_quantity_display.textFill = normalTextColor; boids_quantity_min.textFill = normalTextColor; boids_quantity_max.textFill = normalTextColor
			boids_population_label.textFill = normalTextColor; decrement_boids_population.textFill = normalTextColor; increment_boids_population.textFill = normalTextColor; boids_population_decrement_circle.stroke = normalTextColor; boids_population_increment_circle.stroke = normalTextColor; boids_population_line.stroke = normalTextColor; boids_population_input.style = '-fx-text-fill: rgb(0, 0, 0); -fx-background-color: transparent'
			
			boid_group.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_vitesse.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_group_vitesse.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_masse.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_angle.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_distance.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_new_vitesse.textFill = Color.rgb(0, 0, 0, 0.7)
			boid_position.textFill = Color.rgb(0, 0, 0, 0.7)
			toggle_night_mode.textFill = Color.rgb(0, 0, 0, 0.3)
			toggle_perception.textFill = Color.rgb(0, 0, 0, 0.3)
			hide_infos.textFill = Color.rgb(0, 0, 0, 0.3)
			start_button.textFill = normalTextColor
			see_advanced_settings_label.textFill = normalTextColor
			
			group_label_1.textFill = normalTextColor
			mass_label_1.textFill = normalTextColor; mass_min_1.textFill = normalTextColor;	mass_max_1.textFill = normalTextColor; mass_display_1.textFill = normalTextColor
			speed_label_1.textFill = normalTextColor; speed_min_1.textFill = normalTextColor; speed_max_1.textFill = normalTextColor; speed_display_1.textFill = normalTextColor
			angle_label_1.textFill = normalTextColor; angle_min_1.textFill = normalTextColor; angle_max_1.textFill = normalTextColor; angle_display_1.textFill = normalTextColor
			distance_label_1.textFill = normalTextColor; distance_min_1.textFill = normalTextColor;	distance_max_1.textFill = normalTextColor; distance_display_1.textFill = normalTextColor

			group_label_2.textFill = normalTextColor
			mass_label_2.textFill = normalTextColor; mass_min_2.textFill = normalTextColor;	mass_max_2.textFill = normalTextColor; mass_display_2.textFill = normalTextColor
			speed_label_2.textFill = normalTextColor; speed_min_2.textFill = normalTextColor; speed_max_2.textFill = normalTextColor; speed_display_2.textFill = normalTextColor
			angle_label_2.textFill = normalTextColor; angle_min_2.textFill = normalTextColor; angle_max_2.textFill = normalTextColor; angle_display_2.textFill = normalTextColor
			distance_label_2.textFill = normalTextColor; distance_min_2.textFill = normalTextColor; distance_max_2.textFill = normalTextColor; distance_display_2.textFill = normalTextColor

			group_label_3.textFill = normalTextColor
			mass_label_3.textFill = normalTextColor; mass_min_3.textFill = normalTextColor; mass_max_3.textFill = normalTextColor; mass_display_3.textFill = normalTextColor
			speed_label_3.textFill = normalTextColor; speed_min_3.textFill = normalTextColor; speed_max_3.textFill = normalTextColor; speed_display_3.textFill = normalTextColor
			angle_label_3.textFill = normalTextColor; angle_min_3.textFill = normalTextColor; angle_max_3.textFill = normalTextColor; angle_display_3.textFill = normalTextColor
			distance_label_3.textFill = normalTextColor; distance_min_3.textFill = normalTextColor;	distance_max_3.textFill = normalTextColor; distance_display_3.textFill = normalTextColor

			group_label_4.textFill = normalTextColor
			mass_label_4.textFill = normalTextColor; mass_min_4.textFill = normalTextColor; mass_max_4.textFill = normalTextColor; mass_display_4.textFill = normalTextColor
			speed_label_4.textFill = normalTextColor; speed_min_4.textFill = normalTextColor; speed_max_4.textFill = normalTextColor; speed_display_4.textFill = normalTextColor
			angle_label_4.textFill = normalTextColor; angle_min_4.textFill = normalTextColor; angle_max_4.textFill = normalTextColor; angle_display_4.textFill = normalTextColor
			distance_label_4.textFill = normalTextColor; distance_min_4.textFill = normalTextColor;	distance_max_4.textFill = normalTextColor; distance_display_4.textFill = normalTextColor

			group_label_5.textFill = normalTextColor
			mass_label_5.textFill = normalTextColor; mass_min_5.textFill = normalTextColor;	mass_max_5.textFill = normalTextColor; mass_display_5.textFill = normalTextColor
			speed_label_5.textFill = normalTextColor; speed_min_5.textFill = normalTextColor; speed_max_5.textFill = normalTextColor; speed_display_5.textFill = normalTextColor
			angle_label_5.textFill = normalTextColor; angle_min_5.textFill = normalTextColor; angle_max_5.textFill = normalTextColor; angle_display_5.textFill = normalTextColor
			distance_label_5.textFill = normalTextColor; distance_min_5.textFill = normalTextColor;	distance_max_5.textFill = normalTextColor; distance_display_5.textFill = normalTextColor

			group_label_6.textFill = normalTextColor
			mass_label_6.textFill = normalTextColor; mass_min_6.textFill = normalTextColor;	mass_max_6.textFill = normalTextColor; mass_display_6.textFill = normalTextColor
			speed_label_6.textFill = normalTextColor; speed_min_6.textFill = normalTextColor; speed_max_6.textFill = normalTextColor; speed_display_6.textFill = normalTextColor
			angle_label_6.textFill = normalTextColor; angle_min_6.textFill = normalTextColor; angle_max_6.textFill = normalTextColor; angle_display_6.textFill = normalTextColor
			distance_label_6.textFill = normalTextColor; distance_min_6.textFill = normalTextColor;	distance_max_6.textFill = normalTextColor; distance_display_6.textFill = normalTextColor

			group_label_7.textFill = normalTextColor
			mass_label_7.textFill = normalTextColor; mass_min_7.textFill = normalTextColor; mass_max_7.textFill = normalTextColor; mass_display_7.textFill = normalTextColor
			speed_label_7.textFill = normalTextColor; speed_min_7.textFill = normalTextColor; speed_max_7.textFill = normalTextColor; speed_display_7.textFill = normalTextColor
			angle_label_7.textFill = normalTextColor; angle_min_7.textFill = normalTextColor; angle_max_7.textFill = normalTextColor; angle_display_7.textFill = normalTextColor
			distance_label_7.textFill = normalTextColor; distance_min_7.textFill = normalTextColor;	distance_max_7.textFill = normalTextColor; distance_display_7.textFill = normalTextColor

			group_label_8.textFill = normalTextColor
			mass_label_8.textFill = normalTextColor; mass_min_8.textFill = normalTextColor; mass_max_8.textFill = normalTextColor; mass_display_8.textFill = normalTextColor
			speed_label_8.textFill = normalTextColor; speed_min_8.textFill = normalTextColor; speed_max_8.textFill = normalTextColor; speed_display_8.textFill = normalTextColor
			angle_label_8.textFill = normalTextColor; angle_min_8.textFill = normalTextColor; angle_max_8.textFill = normalTextColor; angle_display_8.textFill = normalTextColor
			distance_label_8.textFill = normalTextColor; distance_min_8.textFill = normalTextColor; distance_max_8.textFill = normalTextColor; distance_display_8.textFill = normalTextColor

			if(this.selectedMap != 1) {
				preview_map_1_border.stroke = Color.rgb(0, 0, 0, 0.6)
				map_label_1.textFill = normalTextColor
			} else if (this.selectedMap == 1) {
				preview_map_1_border.stroke = Color.rgb(0, 0, 0)
				map_label_1.textFill = Color.rgb(0, 0, 0)
			}
			
			if(this.selectedMap != 2) {
				preview_map_2_border.stroke = Color.rgb(0, 0, 0, 0.6)
				map_label_2.textFill = normalTextColor
			} else if (this.selectedMap == 2) {
				preview_map_2_border.stroke = Color.rgb(0, 0, 0)
				map_label_2.textFill = Color.rgb(0, 0, 0)
			}
			
		} else {
			nightMode = true
			night_mode_indicator.fill = Color.rgb(0, 204, 99)
			night_mode_indicator.stroke = Color.rgb(184, 193, 207, 0.3)
			perception_indicator.stroke = Color.rgb(184, 193, 207, 0.3)
			var nightTextColor : Color = Color.rgb(191, 191, 191)
			main_pane.background = new Background(new BackgroundFill(Color.rgb(34, 34, 34), CornerRadii.EMPTY, Insets.EMPTY))
			boids_quantity_label.textFill = nightTextColor;	boids_quantity_display.textFill = nightTextColor; boids_quantity_min.textFill = nightTextColor;	boids_quantity_max.textFill = nightTextColor
			boids_population_label.textFill = nightTextColor; decrement_boids_population.textFill = nightTextColor; increment_boids_population.textFill = nightTextColor; boids_population_decrement_circle.stroke = nightTextColor; boids_population_increment_circle.stroke = nightTextColor;	boids_population_line.stroke = nightTextColor;	boids_population_input.style = '-fx-text-fill: rgb(191, 191, 191); -fx-background-color: transparent'
			
			boid_group.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_vitesse.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_group_vitesse.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_masse.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_angle.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_distance.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_new_vitesse.textFill = Color.rgb(191, 191, 191, 0.7)
			boid_position.textFill = Color.rgb(191, 191, 191, 0.7)
			toggle_night_mode.textFill = Color.rgb(191, 191, 191, 0.3)
			toggle_perception.textFill = Color.rgb(191, 191, 191, 0.3)
			hide_infos.textFill = Color.rgb(191, 191, 191, 0.3)
			start_button.textFill = nightTextColor
			see_advanced_settings_label.textFill = nightTextColor

			group_label_1.textFill = nightTextColor
			mass_label_1.textFill = nightTextColor; mass_min_1.textFill = nightTextColor; mass_max_1.textFill = nightTextColor; mass_display_1.textFill = nightTextColor
			speed_label_1.textFill = nightTextColor; speed_min_1.textFill = nightTextColor; speed_max_1.textFill = nightTextColor; speed_display_1.textFill = nightTextColor
			angle_label_1.textFill = nightTextColor; angle_min_1.textFill = nightTextColor; angle_max_1.textFill = nightTextColor; angle_display_1.textFill = nightTextColor
			distance_label_1.textFill = nightTextColor; distance_min_1.textFill = nightTextColor; distance_max_1.textFill = nightTextColor; distance_display_1.textFill = nightTextColor

			group_label_2.textFill = nightTextColor
			mass_label_2.textFill = nightTextColor; mass_min_2.textFill = nightTextColor; mass_max_2.textFill = nightTextColor; mass_display_2.textFill = nightTextColor
			speed_label_2.textFill = nightTextColor; speed_min_2.textFill = nightTextColor; speed_max_2.textFill = nightTextColor; speed_display_2.textFill = nightTextColor
			angle_label_2.textFill = nightTextColor; angle_min_2.textFill = nightTextColor; angle_max_2.textFill = nightTextColor; angle_display_2.textFill = nightTextColor
			distance_label_2.textFill = nightTextColor; distance_min_2.textFill = nightTextColor;	distance_max_2.textFill = nightTextColor; distance_display_2.textFill = nightTextColor

			group_label_3.textFill = nightTextColor
			mass_label_3.textFill = nightTextColor; mass_min_3.textFill = nightTextColor;	mass_max_3.textFill = nightTextColor; mass_display_3.textFill = nightTextColor
			speed_label_3.textFill = nightTextColor; speed_min_3.textFill = nightTextColor; speed_max_3.textFill = nightTextColor; speed_display_3.textFill = nightTextColor
			angle_label_3.textFill = nightTextColor; angle_min_3.textFill = nightTextColor; angle_max_3.textFill = nightTextColor; angle_display_3.textFill = nightTextColor
			distance_label_3.textFill = nightTextColor; distance_min_3.textFill = nightTextColor; distance_max_3.textFill = nightTextColor; distance_display_3.textFill = nightTextColor

			group_label_4.textFill = nightTextColor
			mass_label_4.textFill = nightTextColor; mass_min_4.textFill = nightTextColor; mass_max_4.textFill = nightTextColor; mass_display_4.textFill = nightTextColor
			speed_label_4.textFill = nightTextColor; speed_min_4.textFill = nightTextColor; speed_max_4.textFill = nightTextColor; speed_display_4.textFill = nightTextColor
			angle_label_4.textFill = nightTextColor; angle_min_4.textFill = nightTextColor; angle_max_4.textFill = nightTextColor; angle_display_4.textFill = nightTextColor
			distance_label_4.textFill = nightTextColor; distance_min_4.textFill = nightTextColor; distance_max_4.textFill = nightTextColor; distance_display_4.textFill = nightTextColor

			group_label_5.textFill = nightTextColor
			mass_label_5.textFill = nightTextColor; mass_min_5.textFill = nightTextColor; mass_max_5.textFill = nightTextColor; mass_display_5.textFill = nightTextColor
			speed_label_5.textFill = nightTextColor; speed_min_5.textFill = nightTextColor; speed_max_5.textFill = nightTextColor; speed_display_5.textFill = nightTextColor
			angle_label_5.textFill = nightTextColor; angle_min_5.textFill = nightTextColor; angle_max_5.textFill = nightTextColor; angle_display_5.textFill = nightTextColor
			distance_label_5.textFill = nightTextColor; distance_min_5.textFill = nightTextColor; distance_max_5.textFill = nightTextColor; distance_display_5.textFill = nightTextColor

			group_label_6.textFill = nightTextColor
			mass_label_6.textFill = nightTextColor; mass_min_6.textFill = nightTextColor;	mass_max_6.textFill = nightTextColor; mass_display_6.textFill = nightTextColor
			speed_label_6.textFill = nightTextColor; speed_min_6.textFill = nightTextColor; speed_max_6.textFill = nightTextColor; speed_display_6.textFill = nightTextColor
			angle_label_6.textFill = nightTextColor; angle_min_6.textFill = nightTextColor; angle_max_6.textFill = nightTextColor; angle_display_6.textFill = nightTextColor
			distance_label_6.textFill = nightTextColor; distance_min_6.textFill = nightTextColor;	distance_max_6.textFill = nightTextColor; distance_display_6.textFill = nightTextColor

			group_label_7.textFill = nightTextColor
			mass_label_7.textFill = nightTextColor; mass_min_7.textFill = nightTextColor;	mass_max_7.textFill = nightTextColor; mass_display_7.textFill = nightTextColor
			speed_label_7.textFill = nightTextColor; speed_min_7.textFill = nightTextColor; speed_max_7.textFill = nightTextColor; speed_display_7.textFill = nightTextColor
			angle_label_7.textFill = nightTextColor; angle_min_7.textFill = nightTextColor; angle_max_7.textFill = nightTextColor; angle_display_7.textFill = nightTextColor
			distance_label_7.textFill = nightTextColor; distance_min_7.textFill = nightTextColor;	distance_max_7.textFill = nightTextColor; distance_display_7.textFill = nightTextColor

			group_label_8.textFill = nightTextColor
			mass_label_8.textFill = nightTextColor; mass_min_8.textFill = nightTextColor;	mass_max_8.textFill = nightTextColor; mass_display_8.textFill = nightTextColor
			speed_label_8.textFill = nightTextColor; speed_min_8.textFill = nightTextColor; speed_max_8.textFill = nightTextColor; speed_display_8.textFill = nightTextColor
			angle_label_8.textFill = nightTextColor; angle_min_8.textFill = nightTextColor; angle_max_8.textFill = nightTextColor; angle_display_8.textFill = nightTextColor
			distance_label_8.textFill = nightTextColor; distance_min_8.textFill = nightTextColor; distance_max_8.textFill = nightTextColor; distance_display_8.textFill = nightTextColor

			if(this.selectedMap != 1) {
				preview_map_1_border.stroke = nightTextColor
				map_label_1.textFill = nightTextColor
			} else if (this.selectedMap == 1) {
				preview_map_1_border.stroke = Color.rgb(235, 221, 26)
				map_label_1.textFill = Color.rgb(235, 221, 26)
			}
			if (this.selectedMap != 2) {
				preview_map_2_border.stroke = nightTextColor
				map_label_2.textFill = nightTextColor
			} else if (this.selectedMap == 2) {
				preview_map_2_border.stroke = Color.rgb(235, 221, 26)
				map_label_2.textFill = Color.rgb(235, 221, 26)
			}
			
		}
	}
	
	@FXML protected def togglePerception() : void {
		if(togglePerception) {
			togglePerception = false
			perception_indicator.fill = Color.TRANSPARENT
			perceptions.forEach[item : Arc |
				item.fill = Color.TRANSPARENT
			]
		} else {
			togglePerception = true
			perception_indicator.fill = Color.rgb(0, 204, 99)
			perceptions.forEach [ item : Arc |
				if(nightMode) item.fill = Color.rgb(255, 245, 112, 0.2) else item.fill = Color.rgb(255, 245, 112, 0.8)
			]
		}
	}
	
	@FXML protected def toggleButtonGlow() : void {	
		if(nightMode)
			toggle_night_mode.textFill = Color.rgb(235, 221, 26)
		else
			toggle_night_mode.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		toggle_night_mode.effect = glowEffect
	}
	
	@FXML protected def toggleButtonReset() : void {
		if(launched) {
			if (nightMode)
				toggle_night_mode.textFill = Color.rgb(191, 191, 191, 0.3)
			else
				toggle_night_mode.textFill = Color.rgb(0, 0, 0, 0.3)
		} else {
			if (nightMode)
				toggle_night_mode.textFill = Color.rgb(191, 191, 191)
			else
				toggle_night_mode.textFill = Color.rgb(0, 0, 0)
		}
		toggle_night_mode.effect = null
	}

	@FXML protected def startButtonGlow() : void {
		if (nightMode)
			start_button.textFill = Color.rgb(235, 221, 26)
		else
			start_button.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		start_button.effect = glowEffect
	}

	@FXML protected def startButtonReset() : void {
		if (nightMode)
			start_button.textFill = Color.rgb(191, 191, 191)
		else
			start_button.textFill = Color.rgb(0, 0, 0)
		start_button.effect = null
	}
	
	@FXML protected def perceptionButtonGlow() : void {
		if (nightMode)
			toggle_perception.textFill = Color.rgb(235, 221, 26)
		else
			toggle_perception.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		toggle_perception.effect = glowEffect
	}
	
	@FXML protected def perceptionButtonReset() : void {
		if (nightMode)
			toggle_perception.textFill = Color.rgb(191, 191, 191, 0.3)
		else
			toggle_perception.textFill = Color.rgb(0, 0, 0, 0.3)
		toggle_perception.effect = null
	}
	
	@FXML protected def infosButtonGlow() : void {
		if (nightMode)
			hide_infos.textFill = Color.rgb(235, 221, 26)
		else
			hide_infos.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		hide_infos.effect = glowEffect
	}
	
	@FXML protected def infosButtonReset() : void {
		if (nightMode)
			hide_infos.textFill = Color.rgb(191, 191, 191, 0.3)
		else
			hide_infos.textFill = Color.rgb(0, 0, 0, 0.3)
		hide_infos.effect = null
	}
	
	@FXML protected def incrementBoidsPopulationGlow() : void {
		if (nightMode) {
			boids_population_increment_circle.stroke = Color.rgb(235, 221, 26)
			increment_boids_population.textFill = Color.rgb(235, 221, 26)
		} else {
			boids_population_increment_circle.stroke = Color.rgb(0, 0, 0)
			increment_boids_population.textFill = Color.rgb(0, 0, 0)	
		}
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		boids_population_increment_circle.effect = glowEffect
	}
	
	@FXML protected def incrementBoidsPopulationReset() : void {
		if (nightMode) {
			boids_population_increment_circle.stroke = Color.rgb(191, 191, 191)
			increment_boids_population.textFill = Color.rgb(191, 191, 191)
		}
		else {
			boids_population_increment_circle.stroke = Color.rgb(0, 0, 0, 0.3)
			increment_boids_population.textFill = Color.rgb(0, 0, 0)
		}
		boids_population_increment_circle.effect = null
		increment_boids_population.effect = null
	}
	
	@FXML protected def decrementBoidsPopulationGlow() : void {
		if (nightMode) {
			boids_population_decrement_circle.stroke = Color.rgb(235, 221, 26)
			decrement_boids_population.textFill = Color.rgb(235, 221, 26)
		} else {
			boids_population_decrement_circle.stroke = Color.rgb(0, 0, 0)
			decrement_boids_population.textFill = Color.rgb(0, 0, 0)
		}
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		boids_population_decrement_circle.effect = glowEffect
	}	
	
	@FXML protected def decrementBoidsPopulationReset() : void {
		if (nightMode) {
			boids_population_decrement_circle.stroke = Color.rgb(191, 191, 191)
			decrement_boids_population.textFill = Color.rgb(191, 191, 191)
		} else {
			boids_population_decrement_circle.stroke = Color.rgb(0, 0, 0, 0.3)
			increment_boids_population.textFill = Color.rgb(0, 0, 0)
		}
		boids_population_decrement_circle.effect = null
		decrement_boids_population.effect = null
	}
	
	@FXML protected def boidsPopulationGlow() : void {
		if (nightMode) {
			boids_population_input.style = '-fx-text-fill: rgb(235, 221, 26); -fx-background-color: transparent'
		} else {
			boids_population_input.style = '-fx-text-fill: rgb(0, 0, 0); -fx-background-color: transparent'
		}
		boids_population_line.strokeWidth = 3
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		boids_population_input.effect = glowEffect
	}
	
	@FXML protected def boidsPopulationReset() : void {
		if (nightMode) {
			boids_population_input.style = '-fx-text-fill: rgb(191, 191, 191); -fx-background-color: transparent'
		} else {
			boids_population_input.style = '-fx-text-fill: rgb(0, 0, 0); -fx-background-color: transparent'
		}
		boids_population_line.strokeWidth = 1
		boids_population_input.effect = null
	}
	
	def toggleUIState() : void {
		if(start_button.disable == true) start_button.disable = false else start_button.disable = true
		if(boids_quantity_input.disable == true) boids_quantity_input.disable = false else boids_quantity_input.disable = true
		if(boids_population_input.disable == true) boids_population_input.disable = false else boids_population_input.disable = true
		// if(toggle_night_mode.disable == true)  toggle_night_mode.disable = false else toggle_night_mode.disable = true
	}
	
	def toggleMenuUIVisibility() : void {
		if(UI_pane.visible) UI_pane.visible = false else UI_pane.visible = true
	}
	
	def toggleSimuUIVisibility() : void {
		if(!toggle_perception.visible) toggle_perception.visible = true else toggle_perception.visible = false
		if(!perception_indicator.visible) perception_indicator.visible = true else perception_indicator.visible = false
	}
	
	@FXML def pause() : void {
		pause_button.visible = false
		resume_button.visible = true
		emitToAgents(new Pause)
	}
	
	@FXML def resume() : void {
		pause_button.visible = true
		resume_button.visible = false
		emitToAgents(new Resume)
	}
	
	def hideInfosVisibility() : void {
		this.resetTexts()
		boids_infos_pane.visible = false
	}
	
	def resetTexts() : void {
		boid_group.text = ''
		boid_vitesse.text = ''
		boid_group_vitesse.text = ''
		boid_masse.text = ''
		boid_angle.text = ''
		boid_distance.text = ''
		boid_new_vitesse.text = ''
	}

	def showInfosVisibility() : void {
		boids_infos_pane.visible = true
	}
	
	def outputQuality(output : String) : Boolean {
		var outputQuality : Boolean = false
		try {
			Integer.parseInt(boids_population_input.text)
			outputQuality = true
		} catch (e : NumberFormatException) {
			System.out.println('Invalid number of populations!')
		}
		return outputQuality
	}
	
	def updateInfos(boidBody : BoidBody) : void {
		boid_group.text = 'Groupe: ' + boidBody.groupe
		boid_vitesse.text = 'Vitesse: (' + String.format("%.3f", boidBody.vitesse.x) + ', ' + String.format("%.3f", boidBody.vitesse.y) + ')'
		boid_group_vitesse.text = 'Vitesse max. groupe: ' + boidBody.groupeVitesseMax
		boid_masse.text = 'Masse: ' + boidBody.masse
		boid_angle.text = 'Angle: ' + boidBody.angleVisibilite
		boid_distance.text = 'Distance percep.: ' + boidBody.distanceVisibilite
		boid_new_vitesse.text = 'Nouvelle vitesse: (' + boidBody.newVitesse.x + ', ' + boidBody.newVitesse.y + ')'
		boid_position.text = 'Position: (' + String.format("%.3f", boidBody.position.x) + ', ' + String.format("%.3f", boidBody.position.y) + ')'
	}

	@FXML protected def changeFocus() : void {
		main_pane.requestFocus()
	}
	
	/* BOIDS QUANTITY GLOWING EFFECT */
	
	@FXML protected def boidsQuantityMinGlow() : void {
		if (nightMode)
			boids_quantity_min.textFill = Color.rgb(235, 221, 26)
		else
			boids_quantity_min.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		boids_quantity_min.effect = glowEffect
	}
	
	@FXML protected def boidsQuantityMaxGlow() : void {
		if (nightMode)
			boids_quantity_max.textFill = Color.rgb(235, 221, 26)
		else
			boids_quantity_max.textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		boids_quantity_max.effect = glowEffect
	}
	
	@FXML protected def boidsQuantityMinReset() : void {
		if (nightMode)
			boids_quantity_min.textFill = Color.rgb(191, 191, 191)
		else
			boids_quantity_min.textFill = Color.rgb(0, 0, 0)
		boids_quantity_min.effect = null
	}
	
	@FXML protected def boidsQuantityMaxReset() : void {
		if (nightMode)
			boids_quantity_max.textFill = Color.rgb(191, 191, 191)
		else
			boids_quantity_max.textFill = Color.rgb(0, 0, 0)
		boids_quantity_max.effect = null
	}
	
	/* MAX/MIN values fast setters */
	
	@FXML protected def boidsQuantitySetToMin() : void {
		boids_quantity_input.value = Integer.parseInt(boids_quantity_min.text)
		boids_quantity_display.text = boids_quantity_min.text
	}
	
	@FXML protected def boidsQuantitySetToMax() : void {
		boids_quantity_input.value = Integer.parseInt(boids_quantity_max.text)
		boids_quantity_display.text = boids_quantity_max.text
	}
	
	@FXML protected def previewMap1Glow() : void {
		if(selectedMap != 1) {
			if (nightMode) {
				preview_map_1_border.stroke = Color.rgb(235, 221, 26, 0.6)
				map_label_1.textFill = Color.rgb(235, 221, 26, 0.6)	
			}
			else {
				preview_map_1_border.stroke = Color.rgb(0, 0, 0, 0.35)
				map_label_1.textFill = Color.rgb(0, 0, 0, 0.6)	
			}
			var glowEffect = new Glow()
			glowEffect.level = 1
			preview_map_1_border.effect = glowEffect
			map_label_1.effect = glowEffect
		}
	}

	@FXML protected def previewMap1Reset() : void {
		if(selectedMap != 1) {
			if (nightMode) {
				preview_map_1_border.stroke = Color.rgb(191, 191, 191)
				map_label_1.textFill = Color.rgb(191, 191, 191)	
			}
			else {
				preview_map_1_border.stroke = Color.rgb(0, 0, 0, 0.6)
				map_label_1.textFill = Color.rgb(0, 0, 0, 0.6)	
			}
			preview_map_1_border.effect = null
			map_label_1.effect = null	
		}
	}

	@FXML protected def previewMap2Glow() : void {
		if(selectedMap != 2) {
			if (nightMode) {
				preview_map_2_border.stroke = Color.rgb(235, 221, 26, 0.6)
				map_label_2.textFill = Color.rgb(235, 221, 26, 0.6)
			}
			else {
				preview_map_2_border.stroke = Color.rgb(0, 0, 0, 0.6)
				map_label_2.textFill = Color.rgb(0, 0, 0, 0.6)		
			}	
			var glowEffect = new Glow()
			glowEffect.level = 1
			preview_map_2_border.effect = glowEffect
			map_label_2.effect = glowEffect	
		}
	}

	@FXML protected def previewMap2Reset() : void {
		if(selectedMap != 2) {
			if (nightMode) {
				preview_map_2_border.stroke = Color.rgb(191, 191, 191)
				map_label_2.textFill = Color.rgb(191, 191, 191)	
			}
			else {
				preview_map_2_border.stroke = Color.rgb(0, 0, 0, 0.6)
				map_label_2.textFill = Color.rgb(0, 0, 0, 0.6)	
			}
			preview_map_2_border.effect = null
			map_label_2.effect = null	
		}
	}
	
	@FXML protected def selectMap(e : MouseEvent) : void {
		if(e.getSource().toString.substring(0, 1) == 'I') { // I pour ImageView
			this.selectedMap = Integer.parseInt((e.getSource() as ImageView).getId().substring((e.getSource() as ImageView).getId().length() - 1))
		} else {
			this.selectedMap = Integer.parseInt((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1))	
		}
		resetMaps()
		switch(this.selectedMap) {
			case 1: {
				if (nightMode) {
					preview_map_1_border.stroke = Color.rgb(235, 221, 26)
					map_label_1.textFill = Color.rgb(235, 221, 26)
				} else {
					preview_map_1_border.stroke = Color.rgb(0, 0, 0)
					map_label_1.textFill = Color.rgb(0, 0, 0)
				}	

				var glowEffect = new Glow()
				glowEffect.level = 0.8
				preview_map_1_border.effect = glowEffect
				map_label_1.effect = glowEffect
				tick_map_1.visible = true
			}
			case 2: {
				if (nightMode) {
					preview_map_2_border.stroke = Color.rgb(235, 221, 26)
					map_label_2.textFill = Color.rgb(235, 221, 26)
				} else {
					preview_map_2_border.stroke = Color.rgb(0, 0, 0)
					map_label_2.textFill = Color.rgb(0, 0, 0)
				}

				var glowEffect = new Glow()
				glowEffect.level = 0.8
				preview_map_2_border.effect = glowEffect
				map_label_2.effect = glowEffect
				tick_map_2.visible = true
			}
		}
	}
	
	protected def resetMaps() : void {
		previewMap1Reset()
		previewMap2Reset()
		
		tick_map_1.visible = false
		tick_map_2.visible = false
	}
	
	@FXML protected def applyGlowEffectOnLabel(e : MouseEvent) {
		if (nightMode)
			(e.getSource() as Label).textFill = Color.rgb(235, 221, 26)
		else
			(e.getSource() as Label).textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		(e.getSource() as Label).effect = glowEffect
	}
	
	@FXML protected def unapplyGlowEffectOnLabel(e : MouseEvent) {
		if (nightMode)
			(e.getSource() as Label).textFill = Color.rgb(191, 191, 191)
		else
			(e.getSource() as Label).textFill = Color.rgb(0, 0, 0)
		(e.getSource() as Label).effect = null
	}
	
	@FXML protected def paneTitleGlow(e : MouseEvent) : void {
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		if (e.getSource().toString.substring(0, 1) == 'P') { // P pour Pane
			var pane = (e.getSource() as Pane).getId()
			if(pane == 'map_selection_pane') {
				map_selection_label.effect = glowEffect
			} else if(pane == 'simulation_parameters_pane') {
				settings_label.effect = glowEffect
			}
		} else {
			var pane = (e.getSource() as ScrollPane).getId()
			if (pane == 'advanced_settings_pane') {
				advanced_settings_label.effect = glowEffect
			}
		}
	}
	
	@FXML protected def toggleAdvancedSettingsVisibility() : void {
		if (advanced_settings_pane.visible) {
			advanced_settings_pane.visible = false
		} else {
			advanced_settings_pane.visible = true
		}
		showGroupConfiguration()
	}
	
	@FXML protected def showGroupConfiguration() : void {
		if(this.boidsPopulation <= 4) {
			advanced_settings_anchor_pane.prefHeight = 330
		} else {
			advanced_settings_anchor_pane.prefHeight = 600
		}
		
		if (this.boidsPopulation >= 1) {
			pane_group_1.visible = true
		} else {
			pane_group_1.visible = false
		}
		if (this.boidsPopulation >= 2) {
			pane_group_2.visible = true
		} else {
			pane_group_2.visible = false
		}
		if (this.boidsPopulation >= 3) {
			pane_group_3.visible = true
		} else {
			pane_group_3.visible = false
		}
		if (this.boidsPopulation >= 4) {
			pane_group_4.visible = true
		} else {
			pane_group_4.visible = false
		}
		if (this.boidsPopulation >= 5) {
			pane_group_5.visible = true
		} else {
			pane_group_5.visible = false
		}
		if (this.boidsPopulation >= 6) {
			pane_group_6.visible = true
		} else {
			pane_group_6.visible = false
		}
		if (this.boidsPopulation >= 7) {
			pane_group_7.visible = true
		} else {
			pane_group_7.visible = false
		}
		if (this.boidsPopulation >= 8) {
			pane_group_8.visible = true
		} else {
			pane_group_8.visible = false
		}
	}
	
	@FXML protected def paneTitleReset() : void {
		map_selection_label.effect = null
		settings_label.effect = null
		advanced_settings_label.effect = null
	}
	
	@FXML protected def subPaneTitleGlow(e : MouseEvent) : void {
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		if((e.getSource() as Pane).getId() == 'pane_group_1') {
			group_label_1.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_2') {
			group_label_2.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_3') {
			group_label_3.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_4') {
			group_label_4.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_5') {
			group_label_5.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_6') {
			group_label_6.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_7') {
			group_label_7.effect = glowEffect
		} else if ((e.getSource() as Pane).getId() == 'pane_group_8') {
			group_label_8.effect = glowEffect
		}
	}

	@FXML protected def subPaneTitleReset() : void {
		group_label_1.effect = null
		group_label_2.effect = null
		group_label_3.effect = null
		group_label_4.effect = null
		group_label_5.effect = null
		group_label_6.effect = null
		group_label_7.effect = null
		group_label_8.effect = null
	}
	
	@FXML protected def resetGroupValues() : void {
		mass_1.value = Configuration::DEFAULT_MASS
		mass_display_1.setText(Configuration::DEFAULT_MASS.toString())
		speed_1.value = Configuration::DEFAULT_SPEED
		speed_display_1.setText(Configuration::DEFAULT_SPEED.toString())
		angle_1.value = Configuration::DEFAULT_ANGLE
		angle_display_1.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_1.value = Configuration::DEFAULT_DISTANCE
		distance_display_1.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_2.value = Configuration::DEFAULT_MASS
		mass_display_2.setText(Configuration::DEFAULT_MASS.toString())
		speed_2.value = Configuration::DEFAULT_SPEED
		speed_display_2.setText(Configuration::DEFAULT_SPEED.toString())
		angle_2.value = Configuration::DEFAULT_ANGLE
		angle_display_2.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_2.value = Configuration::DEFAULT_DISTANCE
		distance_display_2.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_3.value = Configuration::DEFAULT_MASS
		mass_display_3.setText(Configuration::DEFAULT_MASS.toString())
		speed_3.value = Configuration::DEFAULT_SPEED
		speed_display_3.setText(Configuration::DEFAULT_SPEED.toString())
		angle_3.value = Configuration::DEFAULT_ANGLE
		angle_display_3.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_3.value = Configuration::DEFAULT_DISTANCE
		distance_display_3.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_4.value = Configuration::DEFAULT_MASS
		mass_display_4.setText(Configuration::DEFAULT_MASS.toString())
		speed_4.value = Configuration::DEFAULT_SPEED
		speed_display_4.setText(Configuration::DEFAULT_SPEED.toString())
		angle_4.value = Configuration::DEFAULT_ANGLE
		angle_display_4.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_4.value = Configuration::DEFAULT_DISTANCE
		distance_display_4.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_5.value = Configuration::DEFAULT_MASS
		mass_display_5.setText(Configuration::DEFAULT_MASS.toString())
		speed_5.value = Configuration::DEFAULT_SPEED
		speed_display_5.setText(Configuration::DEFAULT_SPEED.toString())
		angle_5.value = Configuration::DEFAULT_ANGLE
		angle_display_5.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_5.value = Configuration::DEFAULT_DISTANCE
		distance_display_5.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_6.value = Configuration::DEFAULT_MASS
		mass_display_6.setText(Configuration::DEFAULT_MASS.toString())
		speed_6.value = Configuration::DEFAULT_SPEED
		speed_display_6.setText(Configuration::DEFAULT_SPEED.toString())
		angle_6.value = Configuration::DEFAULT_ANGLE
		angle_display_6.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_6.value = Configuration::DEFAULT_DISTANCE
		distance_display_6.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_7.value = Configuration::DEFAULT_MASS
		mass_display_7.setText(Configuration::DEFAULT_MASS.toString())
		speed_7.value = Configuration::DEFAULT_SPEED
		speed_display_7.setText(Configuration::DEFAULT_SPEED.toString())
		angle_7.value = Configuration::DEFAULT_ANGLE
		angle_display_7.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_7.value = Configuration::DEFAULT_DISTANCE
		distance_display_7.setText(Configuration::DEFAULT_DISTANCE.toString())
		mass_8.value = Configuration::DEFAULT_MASS
		mass_display_8.setText(Configuration::DEFAULT_MASS.toString())
		speed_8.value = Configuration::DEFAULT_SPEED
		speed_display_8.setText(Configuration::DEFAULT_SPEED.toString())
		angle_8.value = Configuration::DEFAULT_ANGLE
		angle_display_8.setText(Configuration::DEFAULT_ANGLE.toString())
		distance_8.value = Configuration::DEFAULT_DISTANCE
		distance_display_8.setText(Configuration::DEFAULT_DISTANCE.toString())
	}

	@FXML protected def massListener(e : MouseEvent) : void {
		(e.getSource() as ScrollBar).valueProperty().addListener [
			if((e.getSource() as ScrollBar).getId() == 'mass_1')
				mass_display_1.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_2')
				mass_display_2.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_3')
				mass_display_3.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_4')
				mass_display_4.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_5')
				mass_display_5.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_6')
				mass_display_6.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_7')
				mass_display_7.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'mass_8')
				mass_display_8.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
		];
	}

	@FXML protected def speedListener(e : MouseEvent) : void {
		(e.getSource() as ScrollBar).valueProperty().addListener [
			if ((e.getSource() as ScrollBar).getId() == 'speed_1')
				speed_display_1.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_2')
				speed_display_2.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_3')
				speed_display_3.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_4')
				speed_display_4.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_5')
				speed_display_5.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_6')
				speed_display_6.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_7')
				speed_display_7.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'speed_8')
				speed_display_8.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
		];
	}

	@FXML protected def angleListener(e : MouseEvent) : void {
		(e.getSource() as ScrollBar).valueProperty().addListener [
			if ((e.getSource() as ScrollBar).getId() == 'angle_1')
				angle_display_1.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_2')
				angle_display_2.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_3')
				angle_display_3.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_4')
				angle_display_4.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_5')
				angle_display_5.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_6')
				angle_display_6.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_7')
				angle_display_7.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'angle_8')
				angle_display_8.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
		];
	}

	@FXML protected def distanceListener(e : MouseEvent) : void {
		(e.getSource() as ScrollBar).valueProperty().addListener [
			if ((e.getSource() as ScrollBar).getId() == 'distance_1')
				distance_display_1.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_2')
				distance_display_2.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_3')
				distance_display_3.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_4')
				distance_display_4.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_5')
				distance_display_5.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_6')
				distance_display_6.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_7')
				distance_display_7.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
			else if ((e.getSource() as ScrollBar).getId() == 'distance_8')
				distance_display_8.setText(String.format("%.0f", (e.getSource() as ScrollBar).getValue()))
		];
	}
	
	@FXML protected def subMinMaxValueGlow(e : MouseEvent) : void {
		if (nightMode)
			(e.getSource() as Label).textFill = Color.rgb(235, 221, 26)
		else
			(e.getSource() as Label).textFill = Color.rgb(0, 0, 0)
		var glowEffect = new Glow()
		glowEffect.level = 0.8
		(e.getSource() as Label).effect = glowEffect
	}

	@FXML protected def subMinMaxValueReset(e : MouseEvent) : void {
		if (nightMode)
			(e.getSource() as Label).textFill = Color.rgb(191, 191, 191)
		else
			(e.getSource() as Label).textFill = Color.rgb(0, 0, 0)
		(e.getSource() as Label).effect = null
	}
	
	@FXML protected def setFastMassValues(e : MouseEvent) : void {
		if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '1') {
			mass_1.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_1.text = (e.getSource() as Label).text
		} else if((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '2') {
			mass_2.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_2.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '3') {
			mass_3.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_3.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '4') {
			mass_4.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_4.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '5') {
			mass_5.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_5.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '6') {
			mass_6.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_6.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '7') {
			mass_7.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_7.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '8') {
			mass_8.value = Integer.parseInt((e.getSource() as Label).text)
			mass_display_8.text = (e.getSource() as Label).text
		}
	}

	@FXML protected def setFastSpeedValues(e : MouseEvent) : void {
		if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '1') {
			speed_1.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_1.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '2') {
			speed_2.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_2.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '3') {
			speed_3.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_3.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '4') {
			speed_4.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_4.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '5') {
			speed_5.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_5.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '6') {
			speed_6.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_6.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '7') {
			speed_7.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_7.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '8') {
			speed_8.value = Integer.parseInt((e.getSource() as Label).text)
			speed_display_8.text = (e.getSource() as Label).text
		}
	}

	@FXML protected def setFastAngleValues(e : MouseEvent) : void {
		if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '1') {
			angle_1.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_1.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '2') {
			angle_2.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_2.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '3') {
			angle_3.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_3.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '4') {
			angle_4.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_4.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '5') {
			angle_5.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_5.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '6') {
			angle_6.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_6.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '7') {
			angle_7.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_7.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '8') {
			angle_8.value = Integer.parseInt((e.getSource() as Label).text)
			angle_display_8.text = (e.getSource() as Label).text
		}
	}

	@FXML protected def setFastDistanceValues(e : MouseEvent) : void {
		if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '1') {
			distance_1.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_1.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '2') {
			distance_2.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_2.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '3') {
			distance_3.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_3.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '4') {
			distance_4.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_4.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '5') {
			distance_5.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_5.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '6') {
			distance_6.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_6.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '7') {
			distance_7.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_7.text = (e.getSource() as Label).text
		} else if ((e.getSource() as Label).getId().substring((e.getSource() as Label).getId().length() - 1) == '8') {
			distance_8.value = Integer.parseInt((e.getSource() as Label).text)
			distance_display_8.text = (e.getSource() as Label).text
		}
	}
}
