package fr.utbm.boids.gui

import fr.utbm.boids.gui.fx.FxViewerController
import javafx.fxml.FXML
import fr.utbm.boids.events.ConfigureSimulation
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar
import javafx.scene.control.Button
import javafx.scene.Group
import javafx.scene.layout.Pane
import javafx.application.Platform
import javafx.scene.shape.Polygon
import fr.utbm.boids.util.Coordinates
import fr.utbm.boids.util.LineTool
import com.google.common.util.concurrent.AtomicDouble
import java.util.ArrayList
import java.util.List
import fr.utbm.boids.environment.Obstacle
import javafx.animation.PauseTransition

import static extension javafx.util.Duration.*
import fr.utbm.boids.BoidBody
import java.util.Collection
import javafx.scene.shape.Circle

class BoidsFxViewerController extends FxViewerController {

	var launched = false
	var mapCreated = false

	@FXML var main_pane : Pane
	@FXML var myGroup : Group // Non utilis√© pour l'instant
	
	@FXML var start_button : Button

	// Titres
	@FXML var boids_quantity_label : Label
	@FXML var map_selection_label : Label
	@FXML var boids_population_label : Label
	@FXML var boids_vision_label : Label

	// Sliders
	@FXML var boids_quantity_input : ScrollBar
	@FXML var map_selection_input : ScrollBar
	@FXML var boids_population_input : ScrollBar
	@FXML var boids_vision_input : ScrollBar

	// Valeurs
	@FXML var boids_quantity_display : Label
	@FXML var map_selection_display : Label
	@FXML var boids_population_display : Label
	@FXML var boids_vision_display : Label
	
	var obstacles : List<Obstacle>
	var polygons : List<Polygon>	
	var polygonsCoordinates : List<List<Coordinates>>


	def getBoidsQuantity() : int {
		boids_quantity_input.value as int
	}
	
	def getMapSelection() : int {
		map_selection_input.value as int
	}
	
	def getBoidsPopulation() : int {
		boids_population_input.value as int
	}
	
	def getBoidsVision() : int {
		boids_vision_input.value as int
	}
	
	def getMapWidth() : int {
		main_pane.width as int
	}
	
	def getMapHeight() : int {
		main_pane.height as int
	}
 
	@FXML protected def startSimu() : void {
		var ^event = new ConfigureSimulation(this.mapSelection, this.boidsQuantity, this.boidsPopulation, this.boidsVision)
		if (!launched) {
			startAgentApplication() [
				emitToAgents(^event)
			]
			launched = true
			mapCreated = false
			start_button.disable = true
			boids_quantity_input.disable = true
			map_selection_input.disable = true
			boids_population_input.disable = true
			boids_vision_input.disable = true
			hideUI()			
		} else {
			emitToAgents(^event)
		}
	}
	
	def buildMap(map : int) : void {

		var command = new Runnable() {
			@Override
			def run() {
				// Map 1: vide
				if (map == 2) {
					polygons = new ArrayList()
					polygonsCoordinates = new ArrayList()
					obstacles = new ArrayList()
					polygons.add(new Polygon(250.0, 200.0, 365.0, 250.0, 400.0, 300.0, 325.0, 400.0, 205.0,
						225.0))
					polygons.add(new Polygon(605.0, 80.0, 675.0, 65.0, 680.0, 125.0, 650.0, 220.0, 630.0, 250.0, 660.0, 130.0,
							665.0, 75.0, 615.0, 95.0, 560.0, 240.0, 560.0, 205.0, 605.0, 80.0))
					polygons.add(new Polygon(450.0, 450.0, 575.0, 500.0, 575.0, 420.0, 700.0, 500.0, 590.0, 450.0, 590.0, 520.0))
					
					polygons.forEach[p : Polygon |
						main_pane.getChildren().add(0, p)
						polygonsCoordinates.add(generateCoordinates(p))
					]
					
					System.out.println("Affichage de polygonsCoordinates")
					polygonsCoordinates.forEach[pc : List<Coordinates>, index : int | 
						System.out.println('Polygon #' + index)
						pc.forEach[c : Coordinates | 
							System.out.println(c.toString())	
						]
					]
					
					generateObstacles()
					obstacles.forEach[o : Obstacle | System.out.println(o.toString())]
				}
			}
		};

		if (Platform.isFxApplicationThread()) {
			command.run();
		} else {
			Platform.runLater(command);
		}	
	}
	
	def generateCoordinates(p : Polygon) : List<Coordinates> {
		var abscissa : AtomicDouble = new AtomicDouble();
		var coordinates : List<Coordinates> = new ArrayList()
		p.getPoints.forEach [ ordered : Double, index : int |
			if (index % 2 == 0) {
				abscissa.set(ordered)
			} else {
				coordinates.add(new Coordinates(abscissa.get(), ordered.doubleValue()))
			}
		]
		return coordinates
	}
	
	def generateObstacles() : void {
		polygonsCoordinates.forEach [ p |
			var lines : List<LineTool> = new ArrayList()
			p.forEach[c : Coordinates, index : int |
				if(index != 0) {
					var line : LineTool = new LineTool(p.get(index - 1), c)
					line.computeLineEquation()
					lines.add(line)
				}
			]
			var line : LineTool = new LineTool(p.last, p.get(0))
			line.computeLineEquation()
			lines.add(line)
			obstacles.add(new Obstacle(lines))
			
		]
		
	}
	
	/*def updateGraphics(list: Collection<UUID>) : void {
		var wait = new PauseTransition(0.03.seconds)
		wait.playFromStart
		
		wait.onFinished = [
			
			// TODO reduire taille de la partie d'affichage pour les boids + mettre une couleur en fonction du groupe + remplacer cercle par triangle
			for (boid : list){
				var cercle = new Circle()
				cercle.setCenterX(boid.position.x + getMapWidth / 2);
				cercle.setCenterY(boid.position.y + getMapHeight/2); 
				cercle.setRadius(10.0f);
				myPane.getChildren().add(0,cercle)
			}
			
		]
		wait.play
	}*/

	@FXML protected def actionBoidsQuantityDisplay() : void {
		boids_quantity_input.valueProperty().addListener [
			boids_quantity_display.setText(String.format("%.0f", boids_quantity_input.getValue()));
		];
	}

	@FXML protected def actionMapSelectionDisplay() : void {
		map_selection_input.valueProperty().addListener [
			map_selection_display.setText(String.format("%.0f", map_selection_input.getValue()));
		];
	}

	@FXML protected def actionPopulationDisplay() : void {
		boids_population_input.valueProperty().addListener [
			boids_population_display.setText(String.format("%.0f", boids_population_input.getValue()));
		];
	}

	@FXML protected def actionBoidsVisionDisplay() : void {
		boids_vision_input.valueProperty().addListener [
			boids_vision_display.setText(String.format("%.0f", boids_vision_input.getValue()));
		];
	}
	
	def hideUI() : void {
		// Sliders
		boids_quantity_input.visible=false
		map_selection_input.visible = false
		boids_population_input.visible = false
		boids_vision_input.visible = false
		
		// Valeurs
		boids_quantity_display.visible = false
		map_selection_display.visible = false
		boids_population_display.visible = false
		boids_vision_display.visible = false
		
		// Titres
		boids_quantity_label.visible = false
		map_selection_label.visible = false
		boids_population_label.visible = false
		boids_vision_label.visible = false
		
		start_button.visible = false
	}
	
}
