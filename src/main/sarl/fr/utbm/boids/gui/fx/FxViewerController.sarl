package fr.utbm.boids.gui.fx

import io.sarl.lang.core.EventListener
import java.util.UUID
import io.sarl.util.OpenEventSpace
import io.sarl.lang.core.Event
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.application.Platform

abstract class FxViewerController implements EventListener {

	val id = UUID::randomUUID
	/** Event space for interacting with the agents.
	 */
	var ^space : OpenEventSpace
	/** Emit a kill signal when the app is exited.
	 */
	def safeExit {
		//emitToAgents(new AppExit)
	}
	/** Method invoked by the SARL agent to register the object on a space.
	 */
	def setUISpace(^space : OpenEventSpace) {
		this.^space?.unregister(this)
		this.^space = ^space
		this.^space?.register(this)
	}
	/** Replies the space for interaction between SARL agents and UI. 
	 */
	def getUISpace : OpenEventSpace {
		this.^space
	}
	/** Emit an event to the agents.
	 */
	def emitToAgents(^event : Event) {
		if (this.^space !== null) {
			this.^space.emit(ID, ^event)
		}
	}

	def startAgentApplication(feedback : ()=>void) {
		emitToAgents(new AppStart(this, feedback))
	}
	/** Catch exit event.
	 */
	@FXML def exitApplication(^event : ActionEvent) {
		safeExit
		Platform::exit
	}
	/* Get ID of the object on the space.
	 */
	def getID : UUID {
		this.id
	}
	/* Needed for receiving events from the agents.
	 */
	def receiveEvent(^event : Event) {
	}

}
