/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.boids.agents

import io.sarl.core.Behaviors
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.demos.boids.Configuration
import io.sarl.demos.boids.events.BoidsReady
import io.sarl.demos.boids.events.ConfigureSimulation
import io.sarl.demos.boids.events.EndSimulation
import io.sarl.demos.boids.events.PositionChange
import io.sarl.demos.boids.events.StartingSimulation
import io.sarl.demos.boids.events.TimeManagingStart
import io.sarl.demos.boids.gui.BoidsFxViewerController
import io.sarl.lang.core.Address

/** 
 * @author Mickael Constanzer
 * @author Jean-Eudes Patois
 * @author Zilliq11
 */
@SuppressWarnings("potential_field_synchronization_problem", "unused_private_member")
	agent BootAgent {
	uses Logging, Behaviors, InnerContextAccess, Lifecycle
	
	var map : int
	var boidsQuantity : int
	var boidsPopulation : int
	var exited : boolean = false
	var ctrl : BoidsFxViewerController = null

	on Initialize {
		loggingName = "BootAgent-" + this.ID
		ctrl = occurrence.parameters.get(0) as BoidsFxViewerController
		ctrl.UISpace.register(asEventListener)
		spawnInContext(typeof(Environment), innerContext, ctrl) 
		spawnInContext(typeof(TimeManager), innerContext, ctrl.UISpace)
	}
	
	on ConfigureSimulation {
		this.boidsQuantity = occurrence.boidsQuantity
		this.map = occurrence.mapSelection
		this.boidsPopulation = occurrence.boidsPopulation
		this.generateMap()
	}
	
	/**
	 * Query the UI to generate the map and start the simulation.
	 */
	def generateMap() : void {
		var obstacles = ctrl.buildMap(this.map)
		innerContext.defaultSpace.emit(ID, new StartingSimulation())
	}
	
	on BoidsReady {
		var evt = new TimeManagingStart(Configuration::FREQUENCY) 
		evt.source = new Address(innerContext.defaultSpace.spaceID, ID);
		innerContext.defaultSpace.emit(ID, evt)
	}
	
	on PositionChange [!isFromMe] {
		innerContext.defaultSpace.emit(ID, new PositionChange(occurrence.boid, occurrence.x, occurrence.y))
	}

	on EndSimulation [!hasMemberAgent] {
		killMe
	}
	
	on EndSimulation [hasMemberAgent && !exited] {
		exited = true
		innerContext.defaultSpace.emit(ID, new EndSimulation)
	}
}
