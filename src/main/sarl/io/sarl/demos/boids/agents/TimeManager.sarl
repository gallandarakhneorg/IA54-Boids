/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.demos.boids.agents

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.demos.boids.Configuration
import io.sarl.demos.boids.events.Cycle
import io.sarl.demos.boids.events.EndSimulation
import io.sarl.demos.boids.events.Pause
import io.sarl.demos.boids.events.Resume
import io.sarl.demos.boids.events.TimeManagingStart
import io.sarl.util.OpenEventSpace

/** 
 * @author Mickael Constanzer
 * @author Jean-Eudes Patois
 * @author Zilliq11
 */
@SuppressWarnings("potential_field_synchronization_problem")
agent TimeManager {

	uses Logging, DefaultContextInteractions, Lifecycle, Schedules, Behaviors
	
	var online : boolean
	var UISpace : OpenEventSpace
	 
	on Initialize {
		loggingName = "Time Manager-" + this.ID
		this.UISpace = occurrence.parameters.get(0) as OpenEventSpace
		this.UISpace.register(asEventListener)
		info("The time manager is started.")
	}

	on TimeManagingStart {
		this.online = true
		
		task('Iterate').every(occurrence.frequency) [
			if (this.online) {
				emit(new Cycle)
			}
		]
	}
	
	on Pause [this.online] {
		task('Iterate').cancel
		this.online = false
	}
	
	on Resume [!this.online] {
		this.online = true
		task('Iterate').every(Configuration::FREQUENCY) [
			if(this.online)
				emit(new Cycle)
		]
	}

	on EndSimulation {
		this.online = false
		task('Iterate').cancel
		killMe
	}

}