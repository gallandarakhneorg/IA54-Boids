/** 
 * 
 */
package fr.utbm.boids.core

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle

/** 
 * @author Exige and Zilliqman
 * 
 */
agent BootAgent {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	//nb de fils nés
	var sons = 0;

	on Initialize {
		info("The agent was started.")
		spawn(Environment)
		spawn(GUI)
		spawn(Scheduler)
		spawn(Screen)
	}

	on Destroy {
		info("The agent was stopped.")
	}

	on IsStarted {
		//un fils est né
		sons += 1
		
		/* Si tous les fils, sont nés, la fête peut commencer!  */
		if(sons == 4){
			emit(new MakeTheFiestaBegin())
			killMe()
		}
	}











	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
